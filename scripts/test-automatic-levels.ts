import { PrismaClient } from '@prisma/client'
import { GamificationService } from '../lib/gamification/gamificationService'

const prisma = new PrismaClient()

async function testAutomaticLevels() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π...\n')

  try {
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const user = await prisma.user.findFirst({
      where: { email: 'skodagrodno2006@gmail.com' },
      select: {
        id: true,
        name: true,
        email: true,
        role: true,
        experiencePoints: true,
        currentLevel: true,
        totalXpEarned: true
      }
    })

    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }

    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.name} (${user.email})`)
    console.log(`   –†–æ–ª—å: ${user.role}`)
    console.log(`   –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: ${user.currentLevel}`)
    console.log(`   XP: ${user.experiencePoints}`)
    console.log(`   –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${user.totalXpEarned}\n`)

    const gamificationService = new GamificationService()

    // –ù–∞—á–∏—Å–ª—è–µ–º XP —á–µ—Ä–µ–∑ GamificationService
    console.log('üéØ –ù–∞—á–∏—Å–ª—è–µ–º 50 XP —á–µ—Ä–µ–∑ GamificationService...')
    
    const result = await gamificationService.addXp(user.id, {
      amount: 50,
      source: 'test',
      description: '–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ XP',
      metadata: { test: true }
    })

    console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result.newLevel ? '‚úÖ –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è!' : '‚ùå –£—Ä–æ–≤–µ–Ω—å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è'}`)
    if (result.levelUp) {
      console.log(`   –°—Ç–∞—Ä—ã–π —É—Ä–æ–≤–µ–Ω—å: ${result.levelUp.oldLevel}`)
      console.log(`   –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: ${result.levelUp.newLevel}`)
      console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è: ${result.levelUp.levelConfig?.title}`)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const updatedUser = await prisma.user.findUnique({
      where: { id: user.id },
      select: {
        experiencePoints: true,
        currentLevel: true,
        totalXpEarned: true
      }
    })

    console.log('\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:')
    console.log(`   XP: ${updatedUser?.experiencePoints}`)
    console.log(`   –£—Ä–æ–≤–µ–Ω—å: ${updatedUser?.currentLevel}`)
    console.log(`   –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${updatedUser?.totalXpEarned}`)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ä–æ–≤–µ–Ω—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
    const correctLevel = gamificationService.calculateLevel(updatedUser?.experiencePoints || 0, user.role)
    const isCorrect = correctLevel === updatedUser?.currentLevel

    console.log(`\n‚úÖ –£—Ä–æ–≤–µ–Ω—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: ${isCorrect ? '–î–ê' : '–ù–ï–¢'}`)
    if (!isCorrect) {
      console.log(`   –î–æ–ª–∂–µ–Ω –±—ã—Ç—å: ${correctLevel}`)
      console.log(`   –§–∞–∫—Ç–∏—á–µ—Å–∫–∏: ${updatedUser?.currentLevel}`)
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testAutomaticLevels()


