import { PrismaClient } from '@prisma/client'
import { gamificationService } from '../lib/gamification/gamificationService'

const prisma = new PrismaClient()

async function testGamification() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏...')

  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findFirst()
    
    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
      return
    }

    console.log(`üë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${user.name} (ID: ${user.id})`)

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = await gamificationService.getUserStats(user.id)
    console.log('üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', {
      level: stats.level.title,
      xp: stats.xp.current,
      achievements: stats.achievements.total
    })

    // –î–æ–±–∞–≤–ª—è–µ–º XP –∑–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    console.log('\nüéØ –î–æ–±–∞–≤–ª—è–µ–º XP –∑–∞ –¥–µ–π—Å—Ç–≤–∏—è...')

    // XP –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥
    const loginResult = await gamificationService.addXp(user.id, {
      amount: 2,
      source: 'daily_login',
      description: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'
    })
    console.log('‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥:', loginResult)

    // XP –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    const orderResult = await gamificationService.addXp(user.id, {
      amount: 5,
      source: 'order',
      description: '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞'
    })
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:', orderResult)

    // XP –∑–∞ –æ—Ç–∑—ã–≤
    const reviewResult = await gamificationService.addXp(user.id, {
      amount: 10,
      source: 'review',
      description: '–û—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞'
    })
    console.log('‚úÖ –û—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞:', reviewResult)

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const updatedStats = await gamificationService.getUserStats(user.id)
    console.log('\nüìà –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', {
      level: updatedStats.level.title,
      xp: updatedStats.xp.current,
      achievements: updatedStats.achievements.total,
      nextLevel: updatedStats.nextLevel
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    console.log('\nüèÜ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è...')
    const newAchievements = await gamificationService.checkAchievements(user.id)
    console.log('–ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', newAchievements)

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const achievements = await gamificationService.getUserAchievements(user.id)
    console.log(`\nüéñÔ∏è –í—Å–µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: ${achievements.length}`)
    
    if (achievements.length > 0) {
      console.log('–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:')
      achievements.slice(0, 3).forEach(achievement => {
        console.log(`  - ${achievement.icon} ${achievement.title} (+${achievement.xpReward} XP)`)
      })
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    console.log('\nüë• –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É...')
    const referralCode = await gamificationService.createReferralCode(user.id)
    console.log(`–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${referralCode}`)

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testGamification()


