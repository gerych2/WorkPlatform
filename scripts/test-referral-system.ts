import { PrismaClient } from '@prisma/client'
import { ReferralService } from '../lib/gamification/referralService'

const prisma = new PrismaClient()

async function testReferralSystem() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...\n')

  try {
    // 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
    console.log('1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ...')
    const timestamp = Date.now()
    const referrer = await prisma.user.create({
      data: {
        name: '–¢–µ—Å—Ç –ü—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π',
        email: `referrer${timestamp}@test.com`,
        phone: `+375 (29) ${timestamp.toString().slice(-7)}`,
        passwordHash: 'test_hash',
        role: 'client',
        status: 'active',
        location: '–ú–∏–Ω—Å–∫'
      }
    })
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${referrer.name} (ID: ${referrer.id})`)

    // 2. –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
    console.log('\n2. –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥...')
    const referralService = new ReferralService()
    const referralCode = await referralService.createReferralCode(referrer.id)
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${referralCode}`)

    // 3. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ
    console.log('\n3. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ...')
    const referred = await prisma.user.create({
      data: {
        name: '–¢–µ—Å—Ç –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π',
        email: `referred${timestamp}@test.com`,
        phone: `+375 (29) ${(timestamp + 1).toString().slice(-7)}`,
        passwordHash: 'test_hash',
        role: 'client',
        status: 'active',
        location: '–ì–æ–º–µ–ª—å'
      }
    })
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${referred.name} (ID: ${referred.id})`)

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ XP
    console.log('\n4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ XP...')
    const initialReferrer = await prisma.user.findUnique({
      where: { id: referrer.id },
      select: { experiencePoints: true, totalXpEarned: true }
    })
    const initialReferred = await prisma.user.findUnique({
      where: { id: referred.id },
      select: { experiencePoints: true, totalXpEarned: true }
    })
    console.log(`–ü—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π: ${initialReferrer?.experiencePoints} XP (–≤—Å–µ–≥–æ: ${initialReferrer?.totalXpEarned})`)
    console.log(`–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π: ${initialReferred?.experiencePoints} XP (–≤—Å–µ–≥–æ: ${initialReferred?.totalXpEarned})`)

    // 5. –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
    console.log('\n5. –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥...')
    const result = await referralService.useReferralCode(referred.id, referralCode)
    console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç: ${result.success ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞'}`)
    console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ: ${result.message}`)
    if (result.rewards) {
      console.log('–ù–∞–≥—Ä–∞–¥—ã:', JSON.stringify(result.rewards, null, 2))
    }

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ XP
    console.log('\n6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ XP...')
    const finalReferrer = await prisma.user.findUnique({
      where: { id: referrer.id },
      select: { experiencePoints: true, totalXpEarned: true, referralCount: true }
    })
    const finalReferred = await prisma.user.findUnique({
      where: { id: referred.id },
      select: { experiencePoints: true, totalXpEarned: true, referredBy: true }
    })
    console.log(`–ü—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π: ${finalReferrer?.experiencePoints} XP (–≤—Å–µ–≥–æ: ${finalReferrer?.totalXpEarned}, —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${finalReferrer?.referralCount})`)
    console.log(`–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π: ${finalReferred?.experiencePoints} XP (–≤—Å–µ–≥–æ: ${finalReferred?.totalXpEarned}, –ø—Ä–∏–≥–ª–∞—à–µ–Ω: ${finalReferred?.referredBy})`)

    // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é XP
    console.log('\n7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é XP...')
    const xpHistory = await prisma.xpHistory.findMany({
      where: {
        OR: [
          { userId: referrer.id },
          { userId: referred.id }
        ]
      },
      orderBy: { earnedAt: 'desc' }
    })
    console.log('–ò—Å—Ç–æ—Ä–∏—è XP:')
    xpHistory.forEach(entry => {
      console.log(`- ${entry.userId === referrer.id ? '–ü—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π' : '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π'}: +${entry.xpAmount} XP (${entry.description})`)
    })

    console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testReferralSystem()
