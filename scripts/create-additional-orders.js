const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function createAdditionalOrders() {
  try {
    console.log('üìù –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã...')
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    const client = await prisma.user.findUnique({
      where: { email: 'client@example.com' }
    })
    
    if (!client) {
      console.log('‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categories = await prisma.category.findMany({
      where: { isActive: true }
    })
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categories.length}`)
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑—ã –≤ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
    const orders = []
    
    // –ó–∞–∫–∞–∑ 1: –°–∞–Ω—Ç–µ—Ö–Ω–∏–∫ (–∑–∞–≤—Ç—Ä–∞)
    const tomorrow = new Date()
    tomorrow.setDate(tomorrow.getDate() + 1)
    tomorrow.setHours(10, 0, 0, 0)
    
    const order1 = await prisma.order.create({
      data: {
        clientId: client.id,
        categoryId: categories.find(c => c.name === '–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫')?.id || categories[1].id,
        serviceDescription: '–ó–∞–º–µ–Ω–∞ —Å–º–µ—Å–∏—Ç–µ–ª—è –≤ –≤–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ',
        status: 'pending',
        totalPrice: null,
        priceType: 'negotiable',
        orderDate: tomorrow,
        orderTime: new Date('1970-01-01T10:00:00.000Z'),
        address: '–ø—Ä. –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π, 15, –∫–≤. 8',
        phone: client.phone,
        clientName: client.name,
        urgency: 'low',
        estimatedDuration: 1.5,
        preferredTime: 'morning',
        notes: '–°—Ç–∞—Ä—ã–π —Å–º–µ—Å–∏—Ç–µ–ª—å –ø—Ä–æ—Ç–µ–∫–∞–µ—Ç, –Ω—É–∂–Ω–∞ –∑–∞–º–µ–Ω–∞',
        specialRequirements: '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–º–µ—Å–∏—Ç–µ–ª—å —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π'
      }
    })
    orders.push(order1)
    
    // –ó–∞–∫–∞–∑ 2: –†–µ–º–æ–Ω—Ç –∫–≤–∞—Ä—Ç–∏—Ä (–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)
    const dayAfterTomorrow = new Date()
    dayAfterTomorrow.setDate(dayAfterTomorrow.getDate() + 2)
    dayAfterTomorrow.setHours(15, 0, 0, 0)
    
    const order2 = await prisma.order.create({
      data: {
        clientId: client.id,
        categoryId: categories.find(c => c.name === '–†–µ–º–æ–Ω—Ç –∫–≤–∞—Ä—Ç–∏—Ä')?.id || categories[2].id,
        serviceDescription: '–ü–æ–∫–ª–µ–π–∫–∞ –æ–±–æ–µ–≤ –≤ —Å–ø–∞–ª—å–Ω–µ',
        status: 'pending',
        totalPrice: 200.00,
        priceType: 'fixed',
        orderDate: dayAfterTomorrow,
        orderTime: new Date('1970-01-01T15:00:00.000Z'),
        address: '—É–ª. –õ–µ–Ω–∏–Ω–∞, 45, –∫–≤. 3',
        phone: client.phone,
        clientName: client.name,
        urgency: 'medium',
        estimatedDuration: 4,
        preferredTime: 'afternoon',
        notes: '–ö–æ–º–Ω–∞—Ç–∞ 12 –∫–≤.–º, —Å—Ç–µ–Ω—ã –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã',
        specialRequirements: '–û–±–æ–∏ —É–∂–µ –∫—É–ø–ª–µ–Ω—ã, –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ–∫–ª–µ–π–∫–∞'
      }
    })
    orders.push(order2)
    
    // –ó–∞–∫–∞–∑ 3: –£–±–æ—Ä–∫–∞ (—Å–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º)
    const today = new Date()
    today.setHours(18, 0, 0, 0)
    
    const order3 = await prisma.order.create({
      data: {
        clientId: client.id,
        categoryId: categories.find(c => c.name === '–£–±–æ—Ä–∫–∞')?.id || categories[3].id,
        serviceDescription: '–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã',
        status: 'pending',
        totalPrice: 120.00,
        priceType: 'fixed',
        orderDate: today,
        orderTime: new Date('1970-01-01T18:00:00.000Z'),
        address: '—É–ª. –°—É—Ä–≥–∞–Ω–æ–≤–∞, 8, –∫–≤. 15',
        phone: client.phone,
        clientName: client.name,
        urgency: 'high',
        estimatedDuration: 3,
        preferredTime: 'evening',
        notes: '–ö–≤–∞—Ä—Ç–∏—Ä–∞ 2-–∫–æ–º–Ω–∞—Ç–Ω–∞—è, –Ω—É–∂–Ω–∞ —Ç—â–∞—Ç–µ–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞',
        specialRequirements: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ —á–∏—Å—Ç—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞'
      }
    })
    orders.push(order3)
    
    console.log(`\n‚úÖ –°–æ–∑–¥–∞–Ω–æ ${orders.length} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:`)
    
    orders.forEach((order, index) => {
      const category = categories.find(c => c.id === order.categoryId)
      console.log(`\nüìã –ó–∞–∫–∞–∑ ${index + 1}:`)
      console.log(`   ID: ${order.id}`)
      console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${order.serviceDescription}`)
      console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category?.name}`)
      console.log(`   –°—Ç–∞—Ç—É—Å: ${order.status}`)
      console.log(`   –¶–µ–Ω–∞: ${order.totalPrice ? `${order.totalPrice} BYN` : '–ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏'}`)
      console.log(`   –î–∞—Ç–∞: ${order.orderDate.toLocaleDateString('ru-RU')}`)
      console.log(`   –í—Ä–µ–º—è: ${order.orderTime.toLocaleTimeString('ru-RU')}`)
      console.log(`   –ê–¥—Ä–µ—Å: ${order.address}`)
      console.log(`   –°—Ä–æ—á–Ω–æ—Å—Ç—å: ${order.urgency}`)
    })
    
    console.log('\nüéØ –¢–µ–ø–µ—Ä—å —É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –µ—Å—Ç—å –∑–∞–∫–∞–∑—ã –≤ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö:')
    console.log('   - –≠–ª–µ–∫—Ç—Ä–∏–∫ (–∑–∞–∫–∞–∑ #13)')
    console.log('   - –°–∞–Ω—Ç–µ—Ö–Ω–∏–∫ (–Ω–æ–≤—ã–π –∑–∞–∫–∞–∑)')
    console.log('   - –†–µ–º–æ–Ω—Ç –∫–≤–∞—Ä—Ç–∏—Ä (–Ω–æ–≤—ã–π –∑–∞–∫–∞–∑)')
    console.log('   - –£–±–æ—Ä–∫–∞ (–Ω–æ–≤—ã–π –∑–∞–∫–∞–∑)')
    
    console.log('\nüì± –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:')
    console.log('   1. –í–æ–π–¥–∏—Ç–µ –∫–∞–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å (executor@example.com / executor123)')
    console.log('   2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "–ó–∞–∫–∞–∑—ã"')
    console.log('   3. –£–≤–∏–¥–∏—Ç–µ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã')
    console.log('   4. –ú–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã –≤ —Å–≤–æ–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö')
    console.log('   5. –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–Ω—è—Ç—å", "–ü–æ–¥—Ä–æ–±–Ω–µ–µ", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É", "–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤"')
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

createAdditionalOrders()


