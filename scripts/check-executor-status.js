const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function checkExecutorStatus() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è...')
    
    const executor = await prisma.user.findUnique({
      where: { email: 'executor@example.com' },
      include: {
        executorProfile: true
      }
    })

    if (executor) {
      console.log('üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:')
      console.log(`   ID: ${executor.id}`)
      console.log(`   –ò–º—è: ${executor.name}`)
      console.log(`   Email: ${executor.email}`)
      console.log(`   –†–æ–ª—å: ${executor.role}`)
      console.log(`   –°—Ç–∞—Ç—É—Å: ${executor.status}`)
      console.log(`   –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: ${executor.isVerified}`)
      console.log(`   –°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${executor.verificationStatus}`)
      
      if (executor.executorProfile) {
        console.log('üìã –ü—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:')
        console.log(`   –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: ${executor.executorProfile.isVerified}`)
        console.log(`   –°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${executor.executorProfile.verificationStatus}`)
      } else {
        console.log('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }
    } else {
      console.log('‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

checkExecutorStatus()




