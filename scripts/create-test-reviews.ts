import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function createTestReviews() {
  try {
    console.log('üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...')
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    const client = await prisma.user.findFirst({
      where: { role: 'client' }
    })
    
    const executor = await prisma.user.findFirst({
      where: { role: 'executor' }
    })
    
    if (!client) {
      console.log('‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }
    
    if (!executor) {
      console.log('‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }
    
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω –∫–ª–∏–µ–Ω—Ç:', client.name, client.email)
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:', executor.name, executor.email)
    
    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
    const completedOrder = await prisma.order.findFirst({
      where: {
        status: 'completed',
        clientId: client.id,
        executorId: executor.id
      }
    })
    
    if (!completedOrder) {
      console.log('‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }
    
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑:', completedOrder.id)
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ç–∑—ã–≤ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    const clientReview = await prisma.review.create({
      data: {
        orderId: completedOrder.id,
        clientId: client.id,
        executorId: executor.id,
        reviewerId: client.id, // –ö–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–∑—ã–≤
        reviewedId: executor.id, // –ù–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        rating: 5,
        comment: '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –û—á–µ–Ω—å –¥–æ–≤–æ–ª–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º.'
      }
    })
    
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω –æ—Ç–∑—ã–≤ –∫–ª–∏–µ–Ω—Ç–∞:', clientReview.id)
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ç–∑—ã–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
    const executorReview = await prisma.review.create({
      data: {
        orderId: completedOrder.id,
        clientId: client.id,
        executorId: executor.id,
        reviewerId: executor.id, // –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–∑—ã–≤
        reviewedId: client.id, // –ù–∞ –∫–ª–∏–µ–Ω—Ç–∞
        rating: 4,
        comment: '–•–æ—Ä–æ—à–∏–π –∫–ª–∏–µ–Ω—Ç, –≤—Å–µ —á–µ—Ç–∫–æ –æ–±—ä—è—Å–Ω–∏–ª.'
      }
    })
    
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω –æ—Ç–∑—ã–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:', executorReview.id)
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏...')
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    const executorReviews = await prisma.review.findMany({
      where: { reviewedId: executor.id },
      select: { rating: true }
    })
    
    const executorTotalRating = executorReviews.reduce((sum, review) => sum + review.rating, 0)
    const executorAverageRating = executorTotalRating / executorReviews.length
    
    await prisma.executorProfile.update({
      where: { userId: executor.id },
      data: {
        rating: executorAverageRating,
        reviewsCount: executorReviews.length
      }
    })
    
    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ä–µ–π—Ç–∏–Ω–≥ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:', executorAverageRating.toFixed(2))
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–∞
    const clientReviews = await prisma.review.findMany({
      where: { reviewedId: client.id },
      select: { rating: true }
    })
    
    const clientTotalRating = clientReviews.reduce((sum, review) => sum + review.rating, 0)
    const clientAverageRating = clientTotalRating / clientReviews.length
    
    await prisma.user.update({
      where: { id: client.id },
      data: {
        clientRating: clientAverageRating,
        clientReviewsCount: clientReviews.length
      }
    })
    
    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ä–µ–π—Ç–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–∞:', clientAverageRating.toFixed(2))
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const updatedClient = await prisma.user.findUnique({
      where: { id: client.id },
      select: {
        name: true,
        clientRating: true,
        clientReviewsCount: true
      }
    })
    
    const updatedExecutor = await prisma.executorProfile.findUnique({
      where: { userId: executor.id },
      select: {
        rating: true,
        reviewsCount: true
      }
    })
    
    console.log('üìä –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏:')
    console.log('–ö–ª–∏–µ–Ω—Ç:', updatedClient?.name, '- –†–µ–π—Ç–∏–Ω–≥:', updatedClient?.clientRating, '- –û—Ç–∑—ã–≤–æ–≤:', updatedClient?.clientReviewsCount)
    console.log('–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:', executor.name, '- –†–µ–π—Ç–∏–Ω–≥:', updatedExecutor?.rating, '- –û—Ç–∑—ã–≤–æ–≤:', updatedExecutor?.reviewsCount)
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

createTestReviews()
