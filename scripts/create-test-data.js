const { PrismaClient } = require('@prisma/client')
const bcrypt = require('bcryptjs')

const prisma = new PrismaClient()

async function createTestData() {
  try {
    console.log('üóëÔ∏è –û—á–∏—â–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...')
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    await prisma.order.deleteMany()
    await prisma.subscription.deleteMany()
    await prisma.notification.deleteMany()
    await prisma.review.deleteMany()
    await prisma.complaint.deleteMany()
    await prisma.executorDocument.deleteMany()
    await prisma.verification.deleteMany()
    await prisma.executorProfile.deleteMany()
    await prisma.user.deleteMany()
    await prisma.category.deleteMany()
    
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞')
    
    console.log('üë• –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...')
    
    // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const adminPassword = await bcrypt.hash('admin123', 10)
    const admin = await prisma.user.create({
      data: {
        name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        email: 'admin@serviceplatform.by',
        phone: '+375 (29) 123-45-67',
        passwordHash: adminPassword,
        role: 'admin',
        isVerified: true,
        verificationStatus: 'verified',
        location: '–ú–∏–Ω—Å–∫'
      }
    })
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${admin.name}`)

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    const clientPassword = await bcrypt.hash('client123', 10)
    const client = await prisma.user.create({
      data: {
        name: '–ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞',
        email: 'client@example.com',
        phone: '+375 (29) 234-56-78',
        passwordHash: clientPassword,
        role: 'client',
        isVerified: true,
        verificationStatus: 'verified',
        location: '–ì–æ–º–µ–ª—å'
      }
    })
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∫–ª–∏–µ–Ω—Ç: ${client.name}`)

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    const executorPassword = await bcrypt.hash('executor123', 10)
    const executor = await prisma.user.create({
      data: {
        name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
        email: 'executor@example.com',
        phone: '+375 (29) 123-45-67',
        passwordHash: executorPassword,
        role: 'executor',
        isVerified: true,
        verificationStatus: 'verified',
        location: '–ú–∏–Ω—Å–∫'
      }
    })

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    await prisma.executorProfile.create({
      data: {
        userId: executor.id,
        description: '–û–ø—ã—Ç–Ω—ã–π —ç–ª–µ–∫—Ç—Ä–∏–∫ —Å 10-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º',
        rating: 4.8,
        reviewsCount: 45,
        completedOrders: 67,
        isVerified: true,
        verificationStatus: 'verified',
        experience: '10+ –ª–µ—Ç',
        hourlyRate: 25.00,
        responseTime: '–í —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞',
        workingHours: {
          monday: '9:00-18:00',
          tuesday: '9:00-18:00',
          wednesday: '9:00-18:00',
          thursday: '9:00-18:00',
          friday: '9:00-18:00',
          saturday: '10:00-16:00',
          sunday: '–í—ã—Ö–æ–¥–Ω–æ–π'
        },
        categories: [1, 2] // –≠–ª–µ–∫—Ç—Ä–∏–∫ –∏ –°–∞–Ω—Ç–µ—Ö–Ω–∏–∫
      }
    })
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${executor.name}`)

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categories = await prisma.category.createMany({
      data: [
        { name: '–≠–ª–µ–∫—Ç—Ä–∏–∫', description: '–≠–ª–µ–∫—Ç—Ä–æ–º–æ–Ω—Ç–∞–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã', icon: '‚ö°', isActive: true },
        { name: '–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫', description: '–°–∞–Ω—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã', icon: 'üîß', isActive: true },
        { name: '–†–µ–º–æ–Ω—Ç –∫–≤–∞—Ä—Ç–∏—Ä', description: '–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç –∂–∏–ª—ã—Ö –ø–æ–º–µ—â–µ–Ω–∏–π', icon: 'üè†', isActive: true },
        { name: '–£–±–æ—Ä–∫–∞', description: '–ö–ª–∏–Ω–∏–Ω–≥–æ–≤—ã–µ —É—Å–ª—É–≥–∏', icon: 'üßπ', isActive: true },
        { name: '–î–æ—Å—Ç–∞–≤–∫–∞', description: '–ö—É—Ä—å–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏', icon: 'üì¶', isActive: true }
      ]
    })
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${categories.count} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`)

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const createdCategories = await prisma.category.findMany()
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
    if (createdCategories.length > 0) {
      const tomorrow = new Date()
      tomorrow.setDate(tomorrow.getDate() + 1)
      
      const order1 = await prisma.order.create({
        data: {
          clientId: client.id,
          categoryId: createdCategories[0].id,
          serviceDescription: '–ù—É–∂–Ω–æ –ø–æ—á–∏–Ω–∏—Ç—å —Ä–æ–∑–µ—Ç–∫—É –≤ —Å–ø–∞–ª—å–Ω–µ',
          status: 'pending',
          totalPrice: 50.00,
          priceType: 'fixed',
          orderDate: tomorrow,
          orderTime: '14:00',
          address: '—É–ª. –õ–µ–Ω–∏–Ω–∞, 15, –∫–≤. 23',
          phone: client.phone,
          clientName: client.name,
          urgency: 'medium',
          estimatedDuration: 2,
          preferredTime: 'afternoon',
          notes: '–†–æ–∑–µ—Ç–∫–∞ –∏—Å–∫—Ä–∏—Ç –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –ø—Ä–∏–±–æ—Ä–æ–≤'
        }
      })
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑: ${order1.serviceDescription}`)

      const order2 = await prisma.order.create({
        data: {
          clientId: client.id,
          categoryId: createdCategories[1].id,
          serviceDescription: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–π —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∏',
          status: 'confirmed',
          totalPrice: null,
          priceType: 'negotiable',
          orderDate: tomorrow,
          orderTime: '10:00',
          address: '–ø—Ä. –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π, 8, –∫–≤. 45',
          phone: client.phone,
          clientName: client.name,
          urgency: 'low',
          estimatedDuration: 4,
          preferredTime: 'morning',
          specialRequirements: '–ù—É–∂–Ω—ã –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
          executorId: executor.id
        }
      })
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑: ${order2.serviceDescription}`)
    }
    
    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã!')
    console.log('üìß –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:')
    console.log('   –ê–¥–º–∏–Ω: admin@serviceplatform.by / admin123')
    console.log('   –ö–ª–∏–µ–Ω—Ç: client@example.com / client123')
    console.log('   –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: executor@example.com / executor123')
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

createTestData()
