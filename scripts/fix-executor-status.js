const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function fixExecutorStatus() {
  try {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è...')
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ active
    const updatedExecutor = await prisma.user.update({
      where: { email: 'executor@example.com' },
      data: {
        status: 'active'
      }
    })

    console.log('‚úÖ –°—Ç–∞—Ç—É—Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω:')
    console.log(`   ID: ${updatedExecutor.id}`)
    console.log(`   –ò–º—è: ${updatedExecutor.name}`)
    console.log(`   Email: ${updatedExecutor.email}`)
    console.log(`   –†–æ–ª—å: ${updatedExecutor.role}`)
    console.log(`   –°—Ç–∞—Ç—É—Å: ${updatedExecutor.status}`)
    console.log(`   –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: ${updatedExecutor.isVerified}`)
    console.log(`   –°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${updatedExecutor.verificationStatus}`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    const profile = await prisma.executorProfile.findUnique({
      where: { userId: updatedExecutor.id }
    })

    if (profile) {
      console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω:')
      console.log(`   –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: ${profile.isVerified}`)
      console.log(`   –°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${profile.verificationStatus}`)
    } else {
      console.log('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω')
    }
    
    console.log('üéâ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!')
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

fixExecutorStatus()
