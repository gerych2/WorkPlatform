import { PrismaClient } from '@prisma/client'
import { CLIENT_ACHIEVEMENTS, EXECUTOR_ACHIEVEMENTS } from '../lib/gamification/constants'

const prisma = new PrismaClient()

async function initGamification() {
  try {
    console.log('üéÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏...')

    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    await prisma.userAchievement.deleteMany()
    await prisma.achievement.deleteMany()

    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞')

    // –°–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤...')
    for (const achievement of CLIENT_ACHIEVEMENTS) {
      await prisma.achievement.create({
        data: {
          id: parseInt(achievement.id),
          title: achievement.title,
          description: achievement.description,
          icon: achievement.icon,
          xpReward: achievement.xpReward,
          category: achievement.category,
          rarity: achievement.rarity,
          isActive: true
        }
      })
    }

    // –°–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π...')
    for (const achievement of EXECUTOR_ACHIEVEMENTS) {
      await prisma.achievement.create({
        data: {
          id: parseInt(achievement.id) + 100, // –î–æ–±–∞–≤–ª—è–µ–º 100 —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
          title: achievement.title,
          description: achievement.description,
          icon: achievement.icon,
          xpReward: achievement.xpReward,
          category: achievement.category,
          rarity: achievement.rarity,
          isActive: true
        }
      })
    }

    console.log('‚úÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!')
    console.log(`üìä –í—Å–µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: ${CLIENT_ACHIEVEMENTS.length + EXECUTOR_ACHIEVEMENTS.length}`)
    console.log(`üë• –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤: ${CLIENT_ACHIEVEMENTS.length}`)
    console.log(`üîß –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: ${EXECUTOR_ACHIEVEMENTS.length}`)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const achievements = await prisma.achievement.findMany()
    console.log('üìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:')
    achievements.forEach(achievement => {
      console.log(`  - ${achievement.icon} ${achievement.title} (${achievement.rarity})`)
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error)
  } finally {
    await prisma.$disconnect()
  }
}

initGamification()
