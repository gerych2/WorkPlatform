import { PrismaClient } from '@prisma/client'
import { GamificationService } from '../lib/gamification/gamificationService'
import { ReferralService } from '../lib/gamification/referralService'

const prisma = new PrismaClient()
const gamificationService = new GamificationService()
const referralService = new ReferralService()

async function testGamificationSystem() {
  console.log('üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏...')

  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await prisma.user.findMany({
      select: { id: true, name: true, email: true, role: true, experiencePoints: true, currentLevel: true }
    })

    if (users.length === 0) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–Ω–∞—á–∞–ª–∞.')
      return
    }

    console.log(`üë• –ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`)

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (const user of users) {
      console.log(`\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.name} (${user.role})`)
      
      // –î–æ–±–∞–≤–ª—è–µ–º XP –∑–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
      const testActions = [
        { action: 'daily_login', xp: 2, description: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥' },
        { action: 'search_master', xp: 5, description: '–ü–æ–∏—Å–∫ –º–∞—Å—Ç–µ—Ä–∞' },
        { action: 'view_profile', xp: 1, description: '–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è' },
        { action: 'leave_review', xp: 10, description: '–û—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞' },
        { action: 'update_profile', xp: 5, description: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è' }
      ]

      if (user.role === 'executor') {
        testActions.push(
          { action: 'first_subscription', xp: 200, description: '–ü–µ—Ä–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞' },
          { action: 'complete_order', xp: 15, description: '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞' },
          { action: 'get_5_star_review', xp: 25, description: '–û—Ç–∑—ã–≤ –Ω–∞ 5 –∑–≤–µ–∑–¥' }
        )
      }

      // –î–æ–±–∞–≤–ª—è–µ–º XP –∑–∞ –∫–∞–∂–¥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
      for (const testAction of testActions) {
        try {
          const result = await gamificationService.addXp(user.id, {
            amount: testAction.xp,
            source: testAction.action,
            description: testAction.description,
            metadata: { test: true }
          })

          console.log(`  ‚úÖ ${testAction.description}: +${testAction.xp} XP`)
          
          if (result.newLevel) {
            console.log(`  üéâ –ü–û–í–´–®–ï–ù–ò–ï –£–†–û–í–ù–Ø! ${result.levelUp.oldLevel} ‚Üí ${result.levelUp.newLevel}`)
            console.log(`  üèÜ –ù–æ–≤—ã–π —Ç–∏—Ç—É–ª: ${result.levelUp.levelConfig.title} ${result.levelUp.levelConfig.icon}`)
          }
        } catch (error) {
          console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ XP: ${error}`)
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      try {
        const newAchievements = await gamificationService.checkAchievements(user.id)
        if (newAchievements.length > 0) {
          console.log(`  üèÜ –ü–æ–ª—É—á–µ–Ω–æ ${newAchievements.length} –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:`)
          newAchievements.forEach(achievement => {
            console.log(`    - ${achievement.icon} ${achievement.title} (+${achievement.xpReward} XP)`)
          })
        }
      } catch (error) {
        console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: ${error}`)
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      try {
        const stats = await gamificationService.getUserStats(user.id)
        console.log(`  üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`)
        console.log(`    - –£—Ä–æ–≤–µ–Ω—å: ${stats.level.level} (${stats.level.title})`)
        console.log(`    - XP: ${stats.xp.current}`)
        console.log(`    - –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: ${stats.achievements.total}`)
      } catch (error) {
        console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error}`)
      }
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    console.log(`\nüë• –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É...`)
    
    if (users.length >= 2) {
      const referrer = users[0]
      const referred = users[1]
      
      try {
        // –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
        const referralCode = await referralService.createReferralCode(referrer.id)
        console.log(`  üìù –°–æ–∑–¥–∞–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è ${referrer.name}: ${referralCode}`)
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
        const result = await referralService.useReferralCode(referred.id, referralCode)
        if (result.success) {
          console.log(`  ‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!`)
          console.log(`  üéÅ –ù–∞–≥—Ä–∞–¥—ã: ${JSON.stringify(result.rewards, null, 2)}`)
        } else {
          console.log(`  ‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞: ${result.message}`)
        }
      } catch (error) {
        console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: ${error}`)
      }
    }

    console.log(`\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`)
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testGamificationSystem()


