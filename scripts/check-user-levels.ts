import { PrismaClient } from '@prisma/client'
import { GamificationService } from '../lib/gamification/gamificationService'

const prisma = new PrismaClient()

async function checkUserLevels() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n')

  try {
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ì–µ—Ä–º–∞–Ω–∞
    const users = await prisma.user.findMany({
      where: {
        OR: [
          { name: { contains: '–ì–µ—Ä–º–∞–Ω', mode: 'insensitive' } },
          { email: { contains: 'german', mode: 'insensitive' } }
        ]
      },
      select: {
        id: true,
        name: true,
        email: true,
        role: true,
        experiencePoints: true,
        currentLevel: true,
        totalXpEarned: true
      }
    })

    if (users.length === 0) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ì–µ—Ä–º–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }

    for (const user of users) {
      console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.name} (${user.email})`)
      console.log(`   –†–æ–ª—å: ${user.role}`)
      console.log(`   –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: ${user.currentLevel}`)
      console.log(`   XP: ${user.experiencePoints}`)
      console.log(`   –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${user.totalXpEarned}`)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å
      const gamificationService = new GamificationService()
      const correctLevel = gamificationService.calculateLevel(user.experiencePoints, user.role)
      const nextLevelInfo = gamificationService.getNextLevelInfo(user.experiencePoints, user.role)
      
      console.log(`   –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Ä–æ–≤–µ–Ω—å: ${correctLevel}`)
      console.log(`   –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å: ${nextLevelInfo.level} (–Ω—É–∂–Ω–æ ${nextLevelInfo.xpNeeded} XP)`)
      
      if (correctLevel > user.currentLevel) {
        console.log(`   ‚ö†Ô∏è  –ù–£–ñ–ù–û –û–ë–ù–û–í–ò–¢–¨ –£–†–û–í–ï–ù–¨!`)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
        await prisma.user.update({
          where: { id: user.id },
          data: { currentLevel: correctLevel }
        })
        console.log(`   ‚úÖ –£—Ä–æ–≤–µ–Ω—å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ ${correctLevel}`)
      } else {
        console.log(`   ‚úÖ –£—Ä–æ–≤–µ–Ω—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π`)
      }
      
      console.log('')
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

checkUserLevels()
