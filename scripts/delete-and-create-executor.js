const { PrismaClient } = require('@prisma/client')
const bcrypt = require('bcryptjs')

const prisma = new PrismaClient()

async function deleteAndCreateExecutor() {
  try {
    console.log('–£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è...')

    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email executor@example.com
    const existingUser = await prisma.user.findUnique({
      where: { email: 'executor@example.com' }
    })

    if (existingUser) {
      // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
      await prisma.workingHours.deleteMany({
        where: { executorId: existingUser.id }
      })

      await prisma.subscription.deleteMany({
        where: { userId: existingUser.id }
      })

      await prisma.executorProfile.deleteMany({
        where: { userId: existingUser.id }
      })

      await prisma.user.delete({
        where: { id: existingUser.id }
      })

      console.log('–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω')
    }

    console.log('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è...')

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const hashedPassword = await bcrypt.hash('password123', 10)

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    const user = await prisma.user.create({
      data: {
        name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
        email: 'executor@example.com',
        phone: '+375 (29) 123-45-67',
        passwordHash: hashedPassword,
        role: 'executor',
        status: 'active',
        location: '–ú–∏–Ω—Å–∫',
        isVerified: true,
        verificationStatus: 'verified',
        clientRating: 0,
        clientReviewsCount: 0
      }
    })

    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', user)

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    const executorProfile = await prisma.executorProfile.create({
      data: {
        userId: user.id,
        description: '–û–ø—ã—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä –ø–æ —Ä–µ–º–æ–Ω—Ç—É –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é —Ç–µ—Ö–Ω–∏–∫–∏. –†–∞–±–æ—Ç–∞—é –±–æ–ª–µ–µ 5 –ª–µ—Ç, –∏–º–µ—é –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã.',
        experience: '5+ –ª–µ—Ç',
        hourlyRate: 2000,
        responseTime: 'fast',
        completedOrders: 0,
        rating: 0,
        reviewsCount: 0,
        isVerified: true
      }
    })

    console.log('–ü—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å–æ–∑–¥–∞–Ω:', executorProfile)

    // –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã (0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 1 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, ..., 6 = —Å—É–±–±–æ—Ç–∞)
    const workingHours = [
      { dayOfWeek: 1, startTime: '08:00', endTime: '20:00', isWorking: true }, // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
      { dayOfWeek: 2, startTime: '08:00', endTime: '20:00', isWorking: true }, // –í—Ç–æ—Ä–Ω–∏–∫
      { dayOfWeek: 3, startTime: '08:00', endTime: '20:00', isWorking: true }, // –°—Ä–µ–¥–∞
      { dayOfWeek: 4, startTime: '08:00', endTime: '20:00', isWorking: true }, // –ß–µ—Ç–≤–µ—Ä–≥
      { dayOfWeek: 5, startTime: '08:00', endTime: '20:00', isWorking: true }, // –ü—è—Ç–Ω–∏—Ü–∞
      { dayOfWeek: 6, startTime: '08:00', endTime: '20:00', isWorking: true }, // –°—É–±–±–æ—Ç–∞
      { dayOfWeek: 0, startTime: '08:00', endTime: '20:00', isWorking: false } // –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
    ]

    for (const hours of workingHours) {
      await prisma.workingHours.create({
        data: {
          executorId: user.id,
          dayOfWeek: hours.dayOfWeek,
          startTime: hours.startTime,
          endTime: hours.endTime,
          isWorking: hours.isWorking
        }
      })
    }

    console.log('–†–∞–±–æ—á–∏–µ —á–∞—Å—ã —Å–æ–∑–¥–∞–Ω—ã')

    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    const subscription = await prisma.subscription.create({
      data: {
        userId: user.id,
        planType: 'monthly',
        startDate: new Date(),
        endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 –¥–Ω–µ–π
        status: 'active',
        amount: 2990
      }
    })

    console.log('–ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', subscription)

    console.log('\n‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
    console.log('üìß Email: executor@example.com')
    console.log('üîë –ü–∞—Ä–æ–ª—å: password123')
    console.log('üë§ ID:', user.id)
    console.log('‚≠ê –†–µ–π—Ç–∏–Ω–≥:', executorProfile.rating)
    console.log('üí∞ –ü–æ—á–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞:', executorProfile.hourlyRate, '—Ä—É–±/—á–∞—Å')

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:', error)
  } finally {
    await prisma.$disconnect()
  }
}

deleteAndCreateExecutor()
