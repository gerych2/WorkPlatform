import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'

const prisma = new PrismaClient()

async function createAdmin() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω—ã
    const existingAdmin = await prisma.user.findFirst({
      where: { role: 'admin' }
    })

    if (existingAdmin) {
      console.log('‚úÖ –ê–¥–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:')
      console.log(`   ID: ${existingAdmin.id}`)
      console.log(`   –ò–º—è: ${existingAdmin.name}`)
      console.log(`   Email: ${existingAdmin.email}`)
      console.log(`   –†–æ–ª—å: ${existingAdmin.role}`)
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const userCount = await prisma.user.count()
    console.log(`–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: ${userCount}\n`)

    // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
    const hashedPassword = await bcrypt.hash('admin123', 10)
    
    const admin = await prisma.user.create({
      data: {
        name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        email: 'admin@prodo-agency.com',
        passwordHash: hashedPassword,
        role: 'admin',
        status: 'active',
        isVerified: true,
        verificationStatus: 'verified'
      }
    })

    console.log('‚úÖ –ê–¥–º–∏–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
    console.log(`   ID: ${admin.id}`)
    console.log(`   –ò–º—è: ${admin.name}`)
    console.log(`   Email: ${admin.email}`)
    console.log(`   –ü–∞—Ä–æ–ª—å: admin123`)
    console.log(`   –†–æ–ª—å: ${admin.role}`)
    console.log('\nüîë –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:')
    console.log('   Email: admin@prodo-agency.com')
    console.log('   –ü–∞—Ä–æ–ª—å: admin123')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

createAdmin()
