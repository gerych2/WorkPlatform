import { NextRequest, NextResponse } from 'next/server'
import { PrismaClient } from '@prisma/client'
import { EmailService } from '@/lib/email/emailService'

const prisma = new PrismaClient()
const emailService = new EmailService()

// PUT /api/admin/startup-applications/[id] - –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const applicationId = parseInt(params.id)
    const body = await request.json()
    const { status, notes } = body

    if (!status || !['pending', 'approved', 'rejected'].includes(status)) {
      return NextResponse.json(
        { success: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å' },
        { status: 400 }
      )
    }

    const application = await prisma.startupApplication.update({
      where: { id: applicationId },
      data: {
        status,
        notes: notes || null
      },
      include: {
        startup: {
          select: {
            id: true,
            title: true,
            category: true
          }
        }
      }
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try {
      const statusMessages = {
        approved: {
          subject: 'üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–∞–ø –æ–¥–æ–±—Ä–µ–Ω–∞!',
          message: `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–∞–ø "${application.startup.title}" –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.`
        },
        rejected: {
          subject: '‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–∞–ø –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞',
          message: `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–∞–ø "${application.startup.title}" –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–∏–º –ø—Ä–æ–µ–∫—Ç–∞–º!`
        }
      }

      if (statusMessages[status as keyof typeof statusMessages]) {
        const { subject, message } = statusMessages[status as keyof typeof statusMessages]
        
        await emailService.sendEmail(application.email, {
          subject,
          html: `
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
              <h2 style="color: #333;">${subject}</h2>
              <p style="color: #666; line-height: 1.6;">${message}</p>
              ${notes ? `<p style="color: #666; line-height: 1.6;"><strong>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</strong><br>${notes}</p>` : ''}
              <p style="color: #999; font-size: 14px; margin-top: 30px;">
                –° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>
                –ö–æ–º–∞–Ω–¥–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
              </p>
            </div>
          `
        })
      }
    } catch (emailError) {
      console.error('Error sending notification email:', emailError)
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email
    }

    return NextResponse.json({
      success: true,
      data: application
    })
  } catch (error) {
    console.error('Error updating application:', error)
    return NextResponse.json(
      { success: false, error: 'Failed to update application' },
      { status: 500 }
    )
  }
}

// DELETE /api/admin/startup-applications/[id] - –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É
export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const applicationId = parseInt(params.id)

    await prisma.startupApplication.delete({
      where: { id: applicationId }
    })

    return NextResponse.json({
      success: true,
      message: '–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞'
    })
  } catch (error) {
    console.error('Error deleting application:', error)
    return NextResponse.json(
      { success: false, error: 'Failed to delete application' },
      { status: 500 }
    )
  }
}
