import { NextRequest, NextResponse } from 'next/server'
import { PrismaClient } from '@prisma/client'
import { emailService } from '@/lib/email/emailService'

const prisma = new PrismaClient()

// POST - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç
export async function POST(request: NextRequest) {
  try {
    const { ticketId, userId, message } = await request.json()

    if (!ticketId || !userId || !message) {
      return NextResponse.json(
        { success: false, error: '–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' },
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∏–∫–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const ticket = await prisma.supportTicket.findFirst({
      where: {
        id: ticketId,
        userId
      },
      include: {
        user: {
          select: {
            name: true,
            email: true
          }
        }
      }
    })

    if (!ticket) {
      return NextResponse.json(
        { success: false, error: '–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      )
    }

    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const newMessage = await prisma.supportMessage.create({
      data: {
        ticketId,
        userId,
        message,
        isFromAdmin: false
      },
      include: {
        user: {
          select: {
            name: true
          }
        }
      }
    })

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
    await prisma.supportTicket.update({
      where: { id: ticketId },
      data: { updatedAt: new Date() }
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    try {
      const admins = await prisma.user.findMany({
        where: { role: 'admin' },
        select: { email: true }
      })

      const adminEmails = admins.map(admin => admin.email).filter(Boolean) as string[]
      
      if (adminEmails.length > 0) {
        await emailService.sendEmail(adminEmails[0], {
          subject: `üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—Ä–∞—â–µ–Ω–∏–∏: ${ticket.subject}`,
          html: `
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
              <div style="background: linear-gradient(135deg, #28a745 0%, #20c997 100%); padding: 20px; text-align: center;">
                <h1 style="color: white; margin: 0;">üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—Ä–∞—â–µ–Ω–∏–∏</h1>
              </div>
              
              <div style="padding: 20px; background: #f8f9fa;">
                <h2 style="color: #333;">–î–µ—Ç–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:</h2>
                <div style="background: white; padding: 15px; border-radius: 8px; margin: 10px 0;">
                  <p><strong>–û–±—Ä–∞—â–µ–Ω–∏–µ:</strong> ${ticket.subject}</p>
                  <p><strong>–û—Ç:</strong> ${ticket.user.name}</p>
                  <p><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong></p>
                  <div style="background: #f8f9fa; padding: 10px; border-radius: 4px; margin-top: 5px;">
                    ${message.replace(/\n/g, '<br>')}
                  </div>
                </div>
                
                <div style="text-align: center; margin: 20px 0;">
                  <a href="http://localhost:3000/admin/support" style="background: #28a745; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; display: inline-block;">
                    –ü–µ—Ä–µ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
                  </a>
                </div>
              </div>
            </div>
          `,
          text: `–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—Ä–∞—â–µ–Ω–∏–∏ "${ticket.subject}" –æ—Ç ${ticket.user.name}: ${message}`
        })
      }
    } catch (emailError) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', emailError)
    }

    return NextResponse.json({
      success: true,
      message: newMessage
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
    return NextResponse.json(
      { success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
}


