// Email —Å–µ—Ä–≤–∏—Å —á–µ—Ä–µ–∑ Formspree
// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: https://formspree.io

import dotenv from 'dotenv'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config()

interface EmailTemplate {
  subject: string
  html: string
  text?: string
}

interface FormspreeData {
  email: string
  subject: string
  message: string
  html?: string
}

class FormspreeService {
  private endpoint: string

  constructor() {
    this.endpoint = process.env.FORMSPREE_ENDPOINT || ''
    console.log('üîß FormspreeService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å endpoint:', this.endpoint)
  }

  async sendEmail(to: string, template: EmailTemplate): Promise<boolean> {
    try {
      if (!this.endpoint) {
        console.error('‚ùå FORMSPREE_ENDPOINT –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
        return false
      }

      // Formspree –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –≤–∞—à email, –Ω–æ –º—ã —É–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ —Ç–µ–∫—Å—Ç–µ
      const formData: FormspreeData = {
        email: 'admin@prodo-agency.com', // –í–∞—à email –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        subject: `[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è: ${to}] ${template.subject}`,
        message: `–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${to}\n\n${template.text || template.subject}`,
        html: `
          <div style="border: 2px solid #e74c3c; padding: 10px; margin-bottom: 20px; background: #fdf2f2;">
            <h3 style="color: #e74c3c; margin: 0;">üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è: ${to}</h3>
            <p style="margin: 5px 0 0 0; color: #666;">–≠—Ç–æ –ø–∏—Å—å–º–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å</p>
          </div>
          ${template.html}
        `
      }

      const response = await fetch(this.endpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData)
      })

      if (response.ok) {
        console.log('üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Formspree (–ø–æ–ª—É—á–∞—Ç–µ–ª—å:', to, ')')
        return true
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Formspree:', await response.text())
        return false
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ Formspree:', error)
      return false
    }
  }

  async sendNewsletter(emails: string[], newsletterData: any): Promise<{ success: number; failed: number }> {
    let success = 0
    let failed = 0

    for (const email of emails) {
      const result = await this.sendEmail(email, {
        subject: newsletterData.subject,
        html: newsletterData.content,
        text: newsletterData.textContent
      })
      
      if (result) {
        success++
      } else {
        failed++
      }
    }

    return { success, failed }
  }

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  async sendNewOrderNotification(executorEmail: string, orderData: any): Promise<boolean> {
    return await this.sendEmail(executorEmail, {
      subject: 'üéØ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –≤–∞—Å!',
      html: `
        <h2>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</h2>
        <p><strong>–£—Å–ª—É–≥–∞:</strong> ${orderData.serviceDescription || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
        <p><strong>–ö–ª–∏–µ–Ω—Ç:</strong> ${orderData.clientName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
        <p><strong>–ê–¥—Ä–µ—Å:</strong> ${orderData.address || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
        <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${orderData.phone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
        <p><strong>–î–∞—Ç–∞:</strong> ${orderData.orderDate || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
        <p><strong>–í—Ä–µ–º—è:</strong> ${orderData.orderTime || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
        <p><strong>–¶–µ–Ω–∞:</strong> ${orderData.totalPrice || 0} ‚ÇΩ</p>
      `,
      text: `–ù–æ–≤—ã–π –∑–∞–∫–∞–∑! –£—Å–ª—É–≥–∞: ${orderData.serviceDescription}, –ö–ª–∏–µ–Ω—Ç: ${orderData.clientName}, –¶–µ–Ω–∞: ${orderData.totalPrice} ‚ÇΩ`
    })
  }

  async sendOrderCompletedNotification(clientEmail: string, orderData: any): Promise<boolean> {
    return await this.sendEmail(clientEmail, {
      subject: '‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω!',
      html: `
        <h2>–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω!</h2>
        <p><strong>–£—Å–ª—É–≥–∞:</strong> ${orderData.serviceDescription || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
        <p><strong>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</strong> ${orderData.executorName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
        <p><strong>–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</strong> ${new Date().toLocaleDateString('ru-RU')}</p>
        <p><strong>–°—É–º–º–∞:</strong> ${orderData.totalPrice || 0} ‚ÇΩ</p>
      `,
      text: `–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω! –£—Å–ª—É–≥–∞: ${orderData.serviceDescription}, –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${orderData.executorName}, –°—É–º–º–∞: ${orderData.totalPrice} ‚ÇΩ`
    })
  }

  async sendLevelUpNotification(userEmail: string, levelData: any): Promise<boolean> {
    return await this.sendEmail(userEmail, {
      subject: `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è ${levelData.newLevel}!`,
      html: `
        <h2>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</h2>
        <h3>–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è ${levelData.newLevel} - ${levelData.title}!</h3>
        <p>${levelData.description || '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!'}</p>
        <p><strong>–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</strong></p>
        <ul>
          <li>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ø–æ–∏—Å–∫–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π</li>
          <li>–°–∫–∏–¥–∫–∏ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏</li>
          <li>–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</li>
        </ul>
      `,
      text: `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è ${levelData.newLevel} - ${levelData.title}!`
    })
  }
}

export const formspreeService = new FormspreeService()
