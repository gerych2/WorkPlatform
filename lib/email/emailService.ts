import nodemailer from 'nodemailer'
import { formspreeService } from './formspreeService'

interface EmailConfig {
  host: string
  port: number
  secure: boolean
  auth: {
    user: string
    pass: string
  }
}

interface EmailTemplate {
  subject: string
  html: string
  text?: string
}

class EmailService {
  private transporter!: nodemailer.Transporter
  private isDevelopment!: boolean

  constructor() {
    this.initialize()
  }

  private initialize() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Gmail –Ω–∞—Å—Ç—Ä–æ–µ–∫
    this.isDevelopment = !process.env.EMAIL_HOST || !process.env.EMAIL_USER || !process.env.EMAIL_PASS
    
    console.log('üîß EmailService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:')
    console.log(`   EMAIL_HOST: ${process.env.EMAIL_HOST || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`)
    console.log(`   EMAIL_USER: ${process.env.EMAIL_USER || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`)
    console.log(`   EMAIL_PASS: ${process.env.EMAIL_PASS ? '–£–°–¢–ê–ù–û–í–õ–ï–ù' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`)
    console.log(`   –†–µ–∂–∏–º: ${this.isDevelopment ? '–†–ê–ó–†–ê–ë–û–¢–ö–ò' : '–ü–†–û–î–ê–ö–®–ï–ù'}`)
    
    if (this.isDevelopment) {
      // –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
      this.transporter = nodemailer.createTransport({
        streamTransport: true,
        newline: 'unix',
        buffer: true
      })
    } else {
      // –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π SMTP
      this.transporter = nodemailer.createTransport({
        host: 'smtp.gmail.com',
        port: 587,
        secure: false,
        auth: {
          user: process.env.EMAIL_USER || '',
          pass: process.env.EMAIL_PASS || ''
        },
        tls: {
          rejectUnauthorized: false
        }
      })
    }
  }

  // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  reinitialize() {
    this.initialize()
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  async verifyConnection(): Promise<boolean> {
    try {
      if (this.isDevelopment) {
        console.log('‚úÖ Email —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ (—Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)')
        return true
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º Gmail SMTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      
      await this.transporter.verify()
      console.log('‚úÖ Email —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ')
      return true
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ email —Å–µ—Ä–≤–µ—Ä—É:', error)
      return false
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ email
  async sendEmail(to: string, template: EmailTemplate): Promise<boolean> {
    try {
      if (this.isDevelopment) {
        // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–∏—Ä—É–µ–º —Å –¥–µ—Ç–∞–ª—è–º–∏
        console.log('üìß [DEV] Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:')
        console.log(`   –ö–æ–º—É: ${to}`)
        console.log(`   –¢–µ–º–∞: ${template.subject}`)
        console.log(`   HTML: ${template.html.substring(0, 100)}...`)
        console.log(`   üìù –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —ç—Ç–æ –ø–∏—Å—å–º–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞: ${to}`)
        return true
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Gmail SMTP –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const mailOptions = {
        from: process.env.EMAIL_USER,
        to: to,
        subject: template.subject,
        html: template.html,
        text: template.text
      }

      await this.transporter.sendMail(mailOptions)
      console.log('üìß Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Gmail:', to)
      return true
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error)
      return false
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ (–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é)
  async sendNewOrderNotification(executorEmail: string, orderData: any): Promise<boolean> {
    if (this.isDevelopment) {
      return await this.sendEmail(executorEmail, {
        subject: 'üéØ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –≤–∞—Å!',
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 20px; text-align: center;">
              <h1 style="color: white; margin: 0;">üéØ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</h1>
            </div>
            
            <div style="padding: 20px; background: #f8f9fa;">
              <h2 style="color: #333;">–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:</h2>
              <div style="background: white; padding: 15px; border-radius: 8px; margin: 10px 0;">
                <p><strong>–£—Å–ª—É–≥–∞:</strong> ${orderData.serviceDescription || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                <p><strong>–ö–ª–∏–µ–Ω—Ç:</strong> ${orderData.clientName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                <p><strong>–ê–¥—Ä–µ—Å:</strong> ${orderData.address || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${orderData.phone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                <p><strong>–î–∞—Ç–∞:</strong> ${orderData.orderDate || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                <p><strong>–í—Ä–µ–º—è:</strong> ${orderData.orderTime || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                <p><strong>–¶–µ–Ω–∞:</strong> ${orderData.totalPrice || 0} ‚ÇΩ</p>
              </div>
            </div>
          </div>
        `,
        text: `–ù–æ–≤—ã–π –∑–∞–∫–∞–∑! –£—Å–ª—É–≥–∞: ${orderData.serviceDescription}, –ö–ª–∏–µ–Ω—Ç: ${orderData.clientName}, –¶–µ–Ω–∞: ${orderData.totalPrice} ‚ÇΩ`
      })
    }

    return await this.sendEmail(executorEmail, {
      subject: 'üéØ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –≤–∞—Å!',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 20px; text-align: center;">
            <h1 style="color: white; margin: 0;">üéØ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</h1>
          </div>
          
          <div style="padding: 20px; background: #f8f9fa;">
            <h2 style="color: #333;">–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:</h2>
            <div style="background: white; padding: 15px; border-radius: 8px; margin: 10px 0;">
              <p><strong>–£—Å–ª—É–≥–∞:</strong> ${orderData.serviceDescription || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
              <p><strong>–ö–ª–∏–µ–Ω—Ç:</strong> ${orderData.clientName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
              <p><strong>–ê–¥—Ä–µ—Å:</strong> ${orderData.address || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
              <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${orderData.phone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
              <p><strong>–î–∞—Ç–∞:</strong> ${orderData.orderDate || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
              <p><strong>–í—Ä–µ–º—è:</strong> ${orderData.orderTime || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
              <p><strong>–¶–µ–Ω–∞:</strong> ${orderData.totalPrice || 0} ‚ÇΩ</p>
            </div>
          </div>
        </div>
      `,
      text: `–ù–æ–≤—ã–π –∑–∞–∫–∞–∑! –£—Å–ª—É–≥–∞: ${orderData.serviceDescription}, –ö–ª–∏–µ–Ω—Ç: ${orderData.clientName}, –¶–µ–Ω–∞: ${orderData.totalPrice} ‚ÇΩ`
    })
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ (–∫–ª–∏–µ–Ω—Ç—É)
  async sendOrderCompletedNotification(clientEmail: string, orderData: any): Promise<boolean> {
    if (this.isDevelopment) {
      return await this.sendEmail(clientEmail, {
        subject: '‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω!',
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <div style="background: linear-gradient(135deg, #28a745 0%, #20c997 100%); padding: 20px; text-align: center;">
              <h1 style="color: white; margin: 0;">‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω!</h1>
            </div>
            
            <div style="padding: 20px; background: #f8f9fa;">
              <h2 style="color: #333;">–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!</h2>
              <div style="background: white; padding: 15px; border-radius: 8px; margin: 10px 0;">
                <p><strong>–£—Å–ª—É–≥–∞:</strong> ${orderData.serviceDescription || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                <p><strong>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</strong> ${orderData.executorName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                <p><strong>–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</strong> ${new Date().toLocaleDateString('ru-RU')}</p>
                <p><strong>–°—É–º–º–∞:</strong> ${orderData.totalPrice || 0} ‚ÇΩ</p>
              </div>
            </div>
          </div>
        `,
        text: `–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω! –£—Å–ª—É–≥–∞: ${orderData.serviceDescription}, –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${orderData.executorName}, –°—É–º–º–∞: ${orderData.totalPrice} ‚ÇΩ`
      })
    }

    return await this.sendEmail(clientEmail, {
      subject: '‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω!',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <div style="background: linear-gradient(135deg, #28a745 0%, #20c997 100%); padding: 20px; text-align: center;">
            <h1 style="color: white; margin: 0;">‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω!</h1>
          </div>
          
          <div style="padding: 20px; background: #f8f9fa;">
            <h2 style="color: #333;">–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!</h2>
            <div style="background: white; padding: 15px; border-radius: 8px; margin: 10px 0;">
              <p><strong>–£—Å–ª—É–≥–∞:</strong> ${orderData.serviceDescription || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
              <p><strong>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</strong> ${orderData.executorName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
              <p><strong>–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</strong> ${new Date().toLocaleDateString('ru-RU')}</p>
              <p><strong>–°—É–º–º–∞:</strong> ${orderData.totalPrice || 0} ‚ÇΩ</p>
            </div>
          </div>
        </div>
      `,
      text: `–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω! –£—Å–ª—É–≥–∞: ${orderData.serviceDescription}, –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${orderData.executorName}, –°—É–º–º–∞: ${orderData.totalPrice} ‚ÇΩ`
    })
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
  async sendLevelUpNotification(userEmail: string, levelData: any): Promise<boolean> {
    if (this.isDevelopment) {
      return await this.sendEmail(userEmail, {
        subject: `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è ${levelData.newLevel}!`,
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <div style="background: linear-gradient(135deg, #ffd700 0%, #ffed4e 100%); padding: 20px; text-align: center;">
              <h1 style="color: #333; margin: 0;">üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</h1>
              <h2 style="color: #333; margin: 10px 0 0 0;">–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è ${levelData.newLevel}!</h2>
            </div>
            
            <div style="padding: 20px; background: #f8f9fa;">
              <div style="background: white; padding: 20px; border-radius: 8px; margin: 10px 0; text-align: center;">
                <div style="font-size: 48px; margin-bottom: 15px;">${levelData.icon}</div>
                <h3 style="color: #333; margin: 0;">${levelData.title}</h3>
                <p style="color: #666; margin: 10px 0;">${levelData.description || '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!'}</p>
              </div>
            </div>
          </div>
        `,
        text: `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è ${levelData.newLevel} - ${levelData.title}!`
      })
    }

    return await this.sendEmail(userEmail, {
      subject: `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è ${levelData.newLevel}!`,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <div style="background: linear-gradient(135deg, #ffd700 0%, #ffed4e 100%); padding: 20px; text-align: center;">
            <h1 style="color: #333; margin: 0;">üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</h1>
            <h2 style="color: #333; margin: 10px 0 0 0;">–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è ${levelData.newLevel}!</h2>
          </div>
          
          <div style="padding: 20px; background: #f8f9fa;">
            <div style="background: white; padding: 20px; border-radius: 8px; margin: 10px 0; text-align: center;">
              <div style="font-size: 48px; margin-bottom: 15px;">${levelData.icon}</div>
              <h3 style="color: #333; margin: 0;">${levelData.title}</h3>
              <p style="color: #666; margin: 10px 0;">${levelData.description || '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!'}</p>
            </div>
          </div>
        </div>
      `,
      text: `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è ${levelData.newLevel} - ${levelData.title}!`
    })
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
  async sendNewsletter(emails: string[], newsletterData: any): Promise<{ success: number; failed: number }> {
    if (this.isDevelopment) {
      let success = 0
      let failed = 0

      for (const email of emails) {
        const result = await this.sendEmail(email, {
          subject: newsletterData.subject,
          html: `
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
              <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 20px; text-align: center;">
                <h1 style="color: white; margin: 0;">üì¢ ${newsletterData.subject}</h1>
              </div>
              
              <div style="padding: 20px; background: #f8f9fa;">
                <div style="background: white; padding: 20px; border-radius: 8px; margin: 10px 0;">
                  ${newsletterData.content}
                </div>
              </div>
            </div>
          `,
          text: newsletterData.textContent || newsletterData.subject
        })
        
        if (result) {
          success++
        } else {
          failed++
        }
      }

      return { success, failed }
    }

    let success = 0
    let failed = 0

    for (const email of emails) {
      const result = await this.sendEmail(email, {
        subject: newsletterData.subject,
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 20px; text-align: center;">
              <h1 style="color: white; margin: 0;">üì¢ ${newsletterData.subject}</h1>
            </div>
            
            <div style="padding: 20px; background: #f8f9fa;">
              <div style="background: white; padding: 20px; border-radius: 8px; margin: 10px 0;">
                ${newsletterData.content}
              </div>
            </div>
          </div>
        `,
        text: newsletterData.textContent || newsletterData.subject
      })
      
      if (result) {
        success++
      } else {
        failed++
      }
    }

    return { success, failed }
  }
}

export const emailService = new EmailService()
