import { PrismaClient } from '@prisma/client'
import { emailService } from '../email/emailService'

const prisma = new PrismaClient()

export interface NotificationData {
  userId: number
  type: 'level_up' | 'achievement' | 'xp_gain' | 'referral' | 'subscription' | 'support_ticket_created' | 'support_ticket_admin' | 'support_ticket_reply'
  title: string
  message: string
  icon?: string
  xpAmount?: number
  metadata?: any
}

export class NotificationService {
  // –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async createNotification(data: NotificationData): Promise<void> {
    try {
      await prisma.notification.create({
        data: {
          userId: data.userId,
          title: data.title,
          message: data.message,
          type: data.type,
          // metadata: data.metadata || {},
          isRead: false
        }
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      await this.sendEmailNotification(data)
    } catch (error) {
      console.error('Error creating notification:', error)
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  private async sendEmailNotification(data: NotificationData): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await prisma.user.findUnique({
        where: { id: data.userId },
        select: { email: true }
      })

      if (!user?.email) return

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      switch (data.type) {
        case 'level_up':
          if (data.metadata?.levelConfig) {
            await emailService.sendLevelUpNotification(user.email, data.metadata.levelConfig)
          }
          break
        // –î–æ–±–∞–≤–∏–º –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      }
    } catch (error) {
      console.error('Error sending email notification:', error)
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
  async notifyLevelUp(userId: number, oldLevel: number, newLevel: number, levelConfig: any): Promise<void> {
    await this.createNotification({
      userId,
      type: 'level_up',
      title: 'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–≤—ã—à–µ–Ω–∏–µ–º —É—Ä–æ–≤–Ω—è!',
      message: `–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è ${newLevel} - ${levelConfig.title}! ${levelConfig.icon}`,
      icon: levelConfig.icon,
      metadata: {
        oldLevel,
        newLevel,
        levelConfig
      }
    })
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  async notifyAchievement(userId: number, achievement: any): Promise<void> {
    await this.createNotification({
      userId,
      type: 'achievement',
      title: 'üèÜ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!',
      message: `–í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "${achievement.title}"! ${achievement.icon}`,
      icon: achievement.icon,
      xpAmount: achievement.xpReward,
      metadata: {
        achievementId: achievement.id,
        achievement
      }
    })
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ XP
  async notifyXpGain(userId: number, xpAmount: number, source: string, description: string): Promise<void> {
    await this.createNotification({
      userId,
      type: 'xp_gain',
      title: '‚ö° –ü–æ–ª—É—á–µ–Ω XP!',
      message: `+${xpAmount} XP –∑–∞ ${description}`,
      xpAmount,
      metadata: {
        source,
        description
      }
    })
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª–µ
  async notifyReferral(userId: number, referralType: 'new_referral' | 'referral_activity', data: any): Promise<void> {
    if (referralType === 'new_referral') {
      await this.createNotification({
        userId,
        type: 'referral',
        title: 'üë• –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!',
        message: `–í–∞—à –¥—Ä—É–≥ ${data.referredName} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ!`,
        icon: 'üéÅ',
        xpAmount: data.xpReward,
        metadata: data
      })
    } else if (referralType === 'referral_activity') {
      await this.createNotification({
        userId,
        type: 'referral',
        title: 'üéØ –†–µ—Ñ–µ—Ä–∞–ª –∞–∫—Ç–∏–≤–µ–Ω!',
        message: `–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª ${data.referredName} ${data.activity}!`,
        icon: '‚≠ê',
        xpAmount: data.xpReward,
        metadata: data
      })
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
  async notifySubscription(userId: number, subscriptionType: 'new' | 'renewal', data: any): Promise<void> {
    if (subscriptionType === 'new') {
      await this.createNotification({
        userId,
        type: 'subscription',
        title: 'üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!',
        message: `–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ "${data.planName}" —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!`,
        icon: 'üëë',
        xpAmount: data.xpReward,
        metadata: data
      })
    } else if (subscriptionType === 'renewal') {
      await this.createNotification({
        userId,
        type: 'subscription',
        title: 'üîÑ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞!',
        message: `–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ "${data.planName}" –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ ${data.period}!`,
        icon: 'üíé',
        xpAmount: data.xpReward,
        metadata: data
      })
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserNotifications(userId: number, limit: number = 20): Promise<any[]> {
    try {
      const notifications = await prisma.notification.findMany({
        where: { userId },
        orderBy: { createdAt: 'desc' },
        take: limit
      })
      return notifications
    } catch (error) {
      console.error('Error fetching notifications:', error)
      return []
    }
  }

  // –û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
  async markAsRead(notificationId: number): Promise<void> {
    try {
      await prisma.notification.update({
        where: { id: notificationId },
        data: { isRead: true }
      })
    } catch (error) {
      console.error('Error marking notification as read:', error)
    }
  }

  // –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
  async markAllAsRead(userId: number): Promise<void> {
    try {
      await prisma.notification.updateMany({
        where: { userId, isRead: false },
        data: { isRead: true }
      })
    } catch (error) {
      console.error('Error marking all notifications as read:', error)
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  async getUnreadCount(userId: number): Promise<number> {
    try {
      const count = await prisma.notification.count({
        where: { userId, isRead: false }
      })
      return count
    } catch (error) {
      console.error('Error getting unread count:', error)
      return 0
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
  async cleanupOldNotifications(): Promise<void> {
    try {
      const thirtyDaysAgo = new Date()
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30)
      
      await prisma.notification.deleteMany({
        where: {
          createdAt: {
            lt: thirtyDaysAgo
          },
          isRead: true
        }
      })
    } catch (error) {
      console.error('Error cleaning up old notifications:', error)
    }
  }
}
