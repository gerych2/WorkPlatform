// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
// –°–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç localStorage, –ø–æ–∑–∂–µ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ API

export interface User {
  id: string
  name: string
  email: string
  phone: string
  role: 'client' | 'executor' | 'admin'
  status: 'active' | 'blocked' | 'pending'
  registrationDate: string
  lastLogin: string
  location: string
  isVerified: boolean
  documents?: Document[]
  profile?: {
    description?: string
    experience?: string
    hourlyRate?: number
    categories?: string[]
    workingHours?: {
      [key: string]: { start: string; end: string; isWorking: boolean }
    }
  }
}

export interface Order {
  id: string
  clientId: string
  executorId: string
  clientName: string
  executorName: string
  service: string
  category: string
  status: 'pending' | 'confirmed' | 'in_progress' | 'completed' | 'cancelled'
  date: string
  time: string
  price: number
  address: string
  description: string
  createdAt: string
  updatedAt: string
}

export interface Category {
  id: string
  name: string
  description: string
  icon: string
  isActive: boolean
  executorCount: number
  orderCount: number
  createdAt: string
}

export interface Document {
  id: string
  executorId: string
  executorName: string
  documentType: string
  fileName: string
  fileUrl?: string
  uploadDate: string
  status: 'pending' | 'approved' | 'rejected'
  notes?: string
  adminId?: string
  reviewedAt?: string
}

export interface Subscription {
  id: string
  executorId: string
  plan: '1_day' | '7_days' | '30_days'
  status: 'active' | 'expired' | 'cancelled'
  startDate: string
  endDate: string
  price: number
  paymentMethod?: string
  createdAt: string
}

export interface Review {
  id: string
  orderId: string
  clientId: string
  executorId: string
  clientName: string
  executorName: string
  rating: number
  comment: string
  createdAt: string
}

export interface TimeSlot {
  id: string
  executorId: string
  date: string
  time: string
  isAvailable: boolean
  orderId?: string
  createdAt: string
}

// –ö–ª—é—á–∏ –¥–ª—è localStorage
const STORAGE_KEYS = {
  USERS: 'platform_users',
  ORDERS: 'platform_orders',
  CATEGORIES: 'platform_categories',
  DOCUMENTS: 'platform_documents',
  SUBSCRIPTIONS: 'platform_subscriptions',
  REVIEWS: 'platform_reviews',
  TIME_SLOTS: 'platform_time_slots',
  CURRENT_USER: 'current_user',
  ADMIN_AUTH: 'adminAuth'
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
const generateId = (): string => {
  return Date.now().toString(36) + Math.random().toString(36).substr(2)
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY
const getCurrentDate = (): string => {
  const now = new Date()
  return now.toLocaleDateString('ru-RU')
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
const getCurrentTime = (): string => {
  const now = new Date()
  return now.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const initializeDefaultData = () => {
  console.log('initializeDefaultData: –Ω–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏')
  
  // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  if (!localStorage.getItem(STORAGE_KEYS.CATEGORIES)) {
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')
    const defaultCategories: Category[] = [
      {
        id: 'cat_1',
        name: '–≠–ª–µ–∫—Ç—Ä–∏–∫–∞',
        description: '–≠–ª–µ–∫—Ç—Ä–æ–º–æ–Ω—Ç–∞–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã',
        icon: '‚ö°',
        isActive: true,
        executorCount: 0,
        orderCount: 0,
        createdAt: getCurrentDate()
      },
      {
        id: 'cat_2',
        name: '–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞',
        description: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —Ä–µ–º–æ–Ω—Ç —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∏',
        icon: 'üîß',
        isActive: true,
        executorCount: 0,
        orderCount: 0,
        createdAt: getCurrentDate()
      },
      {
        id: 'cat_3',
        name: '–ö–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è',
        description: '–£—Å–ª—É–≥–∏ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∞',
        icon: 'üíÑ',
        isActive: true,
        executorCount: 0,
        orderCount: 0,
        createdAt: getCurrentDate()
      },
      {
        id: 'cat_4',
        name: '–£–±–æ—Ä–∫–∞',
        description: '–ö–ª–∏–Ω–∏–Ω–≥–æ–≤—ã–µ —É—Å–ª—É–≥–∏',
        icon: 'üßπ',
        isActive: true,
        executorCount: 0,
        orderCount: 0,
        createdAt: getCurrentDate()
      },
      {
        id: 'cat_5',
        name: '–†–µ–º–æ–Ω—Ç —Ç–µ—Ö–Ω–∏–∫–∏',
        description: '–†–µ–º–æ–Ω—Ç –±—ã—Ç–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏',
        icon: 'üõ†Ô∏è',
        isActive: true,
        executorCount: 0,
        orderCount: 0,
        createdAt: getCurrentDate()
      }
    ]
    localStorage.setItem(STORAGE_KEYS.CATEGORIES, JSON.stringify(defaultCategories))
  }

  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  if (!localStorage.getItem(STORAGE_KEYS.USERS)) {
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')
    const defaultUsers: User[] = [
      {
        id: 'admin_1',
        name: '–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        email: 'admin@serviceplatform.by',
        phone: '+375 (29) 000-00-00',
        role: 'admin',
        status: 'active',
        registrationDate: getCurrentDate(),
        lastLogin: getCurrentDate(),
        location: '–ú–∏–Ω—Å–∫',
        isVerified: true
      },
      {
        id: 'admin_2',
        name: '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã',
        email: 'manager@serviceplatform.by',
        phone: '+375 (29) 000-00-01',
        role: 'admin',
        status: 'active',
        registrationDate: getCurrentDate(),
        lastLogin: getCurrentDate(),
        location: '–ú–∏–Ω—Å–∫',
        isVerified: true
      },
      {
        id: 'client_1',
        name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
        email: 'client@example.com',
        phone: '+375 (29) 123-45-67',
        role: 'client',
        status: 'active',
        registrationDate: getCurrentDate(),
        lastLogin: getCurrentDate(),
        location: '–ú–∏–Ω—Å–∫',
        isVerified: true
      },
      {
        id: 'executor_1',
        name: '–ê–ª–µ–∫—Å–µ–π –ú–∞—Å—Ç–µ—Ä–æ–≤',
        email: 'executor@example.com',
        phone: '+375 (29) 987-65-43',
        role: 'executor',
        status: 'active',
        registrationDate: getCurrentDate(),
        lastLogin: getCurrentDate(),
        location: '–ú–∏–Ω—Å–∫',
        isVerified: true,
        profile: {
          description: '–û–ø—ã—Ç–Ω—ã–π —ç–ª–µ–∫—Ç—Ä–∏–∫ —Å 10-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º',
          experience: '10 –ª–µ—Ç',
          hourlyRate: 25,
          categories: ['cat_1'], // ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞"
          workingHours: {
            'monday': { start: '09:00', end: '18:00', isWorking: true },
            'tuesday': { start: '09:00', end: '18:00', isWorking: true },
            'wednesday': { start: '09:00', end: '18:00', isWorking: true },
            'thursday': { start: '09:00', end: '18:00', isWorking: true },
            'friday': { start: '09:00', end: '18:00', isWorking: true },
            'saturday': { start: '10:00', end: '16:00', isWorking: true },
            'sunday': { start: '10:00', end: '16:00', isWorking: false }
          }
        }
      }
    ]
    const defaultCategories = [
      { id: 1, name: '–î–∏–∑–∞–π–Ω', description: '–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω, –≤–µ–±-–¥–∏–∑–∞–π–Ω', icon: 'üé®', isActive: true, executorCount: 0, orderCount: 0, createdAt: new Date() },
      { id: 2, name: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞', description: '–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞, –º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', icon: 'üíª', isActive: true, executorCount: 0, orderCount: 0, createdAt: new Date() },
      { id: 3, name: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', description: 'SMM, –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞', icon: 'üìà', isActive: true, executorCount: 0, orderCount: 0, createdAt: new Date() }
    ]
    localStorage.setItem(STORAGE_KEYS.CATEGORIES, JSON.stringify(defaultCategories))
    localStorage.setItem(STORAGE_KEYS.USERS, JSON.stringify(defaultUsers))
    console.log('–î–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage')
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
if (typeof window !== 'undefined') {
  console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è dataService...')
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  // localStorage.clear()
  
  initializeDefaultData()
  console.log('dataService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã
  const users = JSON.parse(localStorage.getItem(STORAGE_KEYS.USERS) || '[]')
  const categories = JSON.parse(localStorage.getItem(STORAGE_KEYS.CATEGORIES) || '[]')
  console.log('–°–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', users.length)
  console.log('–°–æ–∑–¥–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', categories.length)
  console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', users.map((u: any) => ({ email: u.email, role: u.role })))
  
  // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∏—Ö –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
  if (users.length === 0) {
    console.log('–î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ...')
    initializeDefaultData()
  }
}

// –°–µ—Ä–≤–∏—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
export const userService = {
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  register: (userData: Omit<User, 'id' | 'registrationDate' | 'lastLogin' | 'status' | 'isVerified'>): User => {
    const users = JSON.parse(localStorage.getItem(STORAGE_KEYS.USERS) || '[]')
    const newUser: User = {
      ...userData,
      id: generateId(),
      registrationDate: getCurrentDate(),
      lastLogin: getCurrentDate(),
      status: userData.role === 'executor' ? 'pending' : 'active',
      isVerified: userData.role === 'client'
    }
    
    users.push(newUser)
    localStorage.setItem(STORAGE_KEYS.USERS, JSON.stringify(users))
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if (userData.role === 'executor' && userData.profile?.categories) {
      userData.profile.categories.forEach(categoryId => {
        categoryService.incrementExecutorCount(categoryId)
      })
    }
    
    return newUser
  },

  // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  login: (email: string, password: string): User | null => {
    console.log('userService.login –≤—ã–∑–≤–∞–Ω —Å email:', email)
    const users = JSON.parse(localStorage.getItem(STORAGE_KEYS.USERS) || '[]')
    console.log('–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ:', users.length)
    console.log('–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email:', email)
    
    const user = users.find((u: User) => u.email === email)
    console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user)
    
    if (user) {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
      user.lastLogin = getCurrentDate()
      localStorage.setItem(STORAGE_KEYS.USERS, JSON.stringify(users))
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º:', user)
      return user
    }
    
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
    return null
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
  getById: (id: string): User | null => {
    const users = JSON.parse(localStorage.getItem(STORAGE_KEYS.USERS) || '[]')
    return users.find((u: User) => u.id === id) || null
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  getAll: (): User[] => {
    return JSON.parse(localStorage.getItem(STORAGE_KEYS.USERS) || '[]')
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  update: (id: string, updates: Partial<User>): User | null => {
    const users = JSON.parse(localStorage.getItem(STORAGE_KEYS.USERS) || '[]')
    const userIndex = users.findIndex((u: User) => u.id === id)
    
    if (userIndex !== -1) {
      users[userIndex] = { ...users[userIndex], ...updates, updatedAt: getCurrentDate() }
      localStorage.setItem(STORAGE_KEYS.USERS, JSON.stringify(users))
      return users[userIndex]
    }
    
    return null
  },

  // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  toggleStatus: (id: string, status: 'active' | 'blocked'): User | null => {
    return userService.update(id, { status })
  },

  // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
  verifyExecutor: (id: string): User | null => {
    return userService.update(id, { isVerified: true, status: 'active' })
  }
}

// –°–µ—Ä–≤–∏—Å –∑–∞–∫–∞–∑–æ–≤
export const orderService = {
  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
  create: (orderData: Omit<Order, 'id' | 'createdAt' | 'updatedAt'>): Order => {
    const orders = JSON.parse(localStorage.getItem(STORAGE_KEYS.ORDERS) || '[]')
    const newOrder: Order = {
      ...orderData,
      id: generateId(),
      createdAt: getCurrentDate(),
      updatedAt: getCurrentDate()
    }
    
    orders.push(newOrder)
    localStorage.setItem(STORAGE_KEYS.ORDERS, JSON.stringify(orders))
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    categoryService.incrementOrderCount(orderData.category)
    
    return newOrder
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getByUserId: (userId: string, role: 'client' | 'executor'): Order[] => {
    const orders = JSON.parse(localStorage.getItem(STORAGE_KEYS.ORDERS) || '[]')
    if (role === 'client') {
      return orders.filter((o: Order) => o.clientId === userId)
    } else {
      return orders.filter((o: Order) => o.executorId === userId)
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
  getAll: (): Order[] => {
    return JSON.parse(localStorage.getItem(STORAGE_KEYS.ORDERS) || '[]')
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
  updateStatus: (id: string, status: Order['status']): Order | null => {
    const orders = JSON.parse(localStorage.getItem(STORAGE_KEYS.ORDERS) || '[]')
    const orderIndex = orders.findIndex((o: Order) => o.id === id)
    
    if (orderIndex !== -1) {
      orders[orderIndex].status = status
      orders[orderIndex].updatedAt = getCurrentDate()
      localStorage.setItem(STORAGE_KEYS.ORDERS, JSON.stringify(orders))
      return orders[orderIndex]
    }
    
    return null
  },

  // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
  delete: (id: string): boolean => {
    const orders = JSON.parse(localStorage.getItem(STORAGE_KEYS.ORDERS) || '[]')
    const filteredOrders = orders.filter((o: Order) => o.id !== id)
    
    if (filteredOrders.length !== orders.length) {
      localStorage.setItem(STORAGE_KEYS.ORDERS, JSON.stringify(filteredOrders))
      return true
    }
    
    return false
  }
}

// –°–µ—Ä–≤–∏—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–π
export const categoryService = {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  getAll: (): Category[] => {
    return JSON.parse(localStorage.getItem(STORAGE_KEYS.CATEGORIES) || '[]')
  },

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  create: (categoryData: Omit<Category, 'id' | 'createdAt' | 'executorCount' | 'orderCount'>): Category => {
    const categories = JSON.parse(localStorage.getItem(STORAGE_KEYS.CATEGORIES) || '[]')
    const newCategory: Category = {
      ...categoryData,
      id: generateId(),
      createdAt: getCurrentDate(),
      executorCount: 0,
      orderCount: 0
    }
    
    categories.push(newCategory)
    localStorage.setItem(STORAGE_KEYS.CATEGORIES, JSON.stringify(categories))
    
    return newCategory
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  update: (id: string, updates: Partial<Category>): Category | null => {
    const categories = JSON.parse(localStorage.getItem(STORAGE_KEYS.CATEGORIES) || '[]')
    const categoryIndex = categories.findIndex((c: Category) => c.id === id)
    
    if (categoryIndex !== -1) {
      categories[categoryIndex] = { ...categories[categoryIndex], ...updates }
      localStorage.setItem(STORAGE_KEYS.CATEGORIES, JSON.stringify(categories))
      return categories[categoryIndex]
    }
    
    return null
  },

  // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
  incrementExecutorCount: (categoryId: string): void => {
    const categories = JSON.parse(localStorage.getItem(STORAGE_KEYS.CATEGORIES) || '[]')
    const category = categories.find((c: Category) => c.id === categoryId)
    
    if (category) {
      category.executorCount++
      localStorage.setItem(STORAGE_KEYS.CATEGORIES, JSON.stringify(categories))
    }
  },

  // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤
  incrementOrderCount: (categoryId: string): void => {
    const categories = JSON.parse(localStorage.getItem(STORAGE_KEYS.CATEGORIES) || '[]')
    const category = categories.find((c: Category) => c.id === categoryId)
    
    if (category) {
      category.orderCount++
      localStorage.setItem(STORAGE_KEYS.CATEGORIES, JSON.stringify(categories))
    }
  }
}

// –°–µ—Ä–≤–∏—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
export const documentService = {
  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
  upload: (documentData: Omit<Document, 'id' | 'uploadDate' | 'status'>): Document => {
    const documents = JSON.parse(localStorage.getItem(STORAGE_KEYS.DOCUMENTS) || '[]')
    const newDocument: Document = {
      ...documentData,
      id: generateId(),
      uploadDate: getCurrentDate(),
      status: 'pending'
    }
    
    documents.push(newDocument)
    localStorage.setItem(STORAGE_KEYS.DOCUMENTS, JSON.stringify(documents))
    
    return newDocument
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
  getByExecutorId: (executorId: string): Document[] => {
    const documents = JSON.parse(localStorage.getItem(STORAGE_KEYS.DOCUMENTS) || '[]')
    return documents.filter((d: Document) => d.executorId === executorId)
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  getAll: (): Document[] => {
    return JSON.parse(localStorage.getItem(STORAGE_KEYS.DOCUMENTS) || '[]')
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
  updateStatus: (id: string, status: Document['status'], adminId: string, notes?: string): Document | null => {
    const documents = JSON.parse(localStorage.getItem(STORAGE_KEYS.DOCUMENTS) || '[]')
    const documentIndex = documents.findIndex((d: Document) => d.id === id)
    
    if (documentIndex !== -1) {
      documents[documentIndex].status = status
      documents[documentIndex].adminId = adminId
      documents[documentIndex].reviewedAt = getCurrentDate()
      if (notes) documents[documentIndex].notes = notes
      
      localStorage.setItem(STORAGE_KEYS.DOCUMENTS, JSON.stringify(documents))
      
      // –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω, –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
      if (status === 'approved') {
        const document = documents[documentIndex]
        userService.verifyExecutor(document.executorId)
      }
      
      return documents[documentIndex]
    }
    
    return null
  }
}

// –°–µ—Ä–≤–∏—Å –ø–æ–¥–ø–∏—Å–æ–∫
export const subscriptionService = {
  // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
  create: (subscriptionData: Omit<Subscription, 'id' | 'createdAt'>): Subscription => {
    const subscriptions = JSON.parse(localStorage.getItem(STORAGE_KEYS.SUBSCRIPTIONS) || '[]')
    const newSubscription: Subscription = {
      ...subscriptionData,
      id: generateId(),
      createdAt: getCurrentDate()
    }
    
    subscriptions.push(newSubscription)
    localStorage.setItem(STORAGE_KEYS.SUBSCRIPTIONS, JSON.stringify(subscriptions))
    
    return newSubscription
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
  getActiveByExecutorId: (executorId: string): Subscription | null => {
    const subscriptions = JSON.parse(localStorage.getItem(STORAGE_KEYS.SUBSCRIPTIONS) || '[]')
    const now = new Date()
    
    return subscriptions.find((s: Subscription) => 
      s.executorId === executorId && 
      s.status === 'active' && 
      new Date(s.endDate) > now
    ) || null
  },

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
  isActive: (executorId: string): boolean => {
    return subscriptionService.getActiveByExecutorId(executorId) !== null
  }
}

// –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
export const timeSlotService = {
  // –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
  create: (slotData: Omit<TimeSlot, 'id' | 'createdAt'>): TimeSlot => {
    const slots = JSON.parse(localStorage.getItem(STORAGE_KEYS.TIME_SLOTS) || '[]')
    const newSlot: TimeSlot = {
      ...slotData,
      id: generateId(),
      createdAt: getCurrentDate()
    }
    
    slots.push(newSlot)
    localStorage.setItem(STORAGE_KEYS.TIME_SLOTS, JSON.stringify(slots))
    
    return newSlot
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É
  getByExecutorAndDate: (executorId: string, date: string): TimeSlot[] => {
    const slots = JSON.parse(localStorage.getItem(STORAGE_KEYS.TIME_SLOTS) || '[]')
    return slots.filter((s: TimeSlot) => 
      s.executorId === executorId && s.date === date
    )
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞
  update: (id: string, updates: Partial<TimeSlot>): TimeSlot | null => {
    const slots = JSON.parse(localStorage.getItem(STORAGE_KEYS.TIME_SLOTS) || '[]')
    const slotIndex = slots.findIndex((s: TimeSlot) => s.id === id)
    
    if (slotIndex !== -1) {
      slots[slotIndex] = { ...slots[slotIndex], ...updates }
      localStorage.setItem(STORAGE_KEYS.TIME_SLOTS, JSON.stringify(slots))
      return slots[slotIndex]
    }
    
    return null
  },

  // –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞
  delete: (id: string): boolean => {
    const slots = JSON.parse(localStorage.getItem(STORAGE_KEYS.TIME_SLOTS) || '[]')
    const filteredSlots = slots.filter((s: TimeSlot) => s.id !== id)
    
    if (filteredSlots.length !== slots.length) {
      localStorage.setItem(STORAGE_KEYS.TIME_SLOTS, JSON.stringify(filteredSlots))
      return true
    }
    
    return false
  }
}

// –°–µ—Ä–≤–∏—Å –æ—Ç–∑—ã–≤–æ–≤
export const reviewService = {
  // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
  create: (reviewData: Omit<Review, 'id' | 'createdAt'>): Review => {
    const reviews = JSON.parse(localStorage.getItem(STORAGE_KEYS.REVIEWS) || '[]')
    const newReview: Review = {
      ...reviewData,
      id: generateId(),
      createdAt: getCurrentDate()
    }
    
    reviews.push(newReview)
    localStorage.setItem(STORAGE_KEYS.REVIEWS, JSON.stringify(reviews))
    
    return newReview
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
  getByExecutorId: (executorId: string): Review[] => {
    const reviews = JSON.parse(localStorage.getItem(STORAGE_KEYS.REVIEWS) || '[]')
    return reviews.filter((r: Review) => r.executorId === executorId)
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤
  getAll: (): Review[] => {
    return JSON.parse(localStorage.getItem(STORAGE_KEYS.REVIEWS) || '[]')
  }
}

// –°–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
export const authService = {
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  setCurrentUser: (user: User): void => {
    console.log('authService.setCurrentUser –≤—ã–∑–≤–∞–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', user)
    localStorage.setItem(STORAGE_KEYS.CURRENT_USER, JSON.stringify(user))
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage')
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getCurrentUser: (): User | null => {
    const userData = localStorage.getItem(STORAGE_KEYS.CURRENT_USER)
    console.log('authService.getCurrentUser, –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage:', userData)
    const user = userData ? JSON.parse(userData) : null
    console.log('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user)
    return user
  },

  // –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  logout: (): void => {
    localStorage.removeItem(STORAGE_KEYS.CURRENT_USER)
  },

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  isAuthenticated: (): boolean => {
    return authService.getCurrentUser() !== null
  }
}

// –°–µ—Ä–≤–∏—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
export const adminService = {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  isAdmin: (): boolean => {
    const currentUser = authService.getCurrentUser()
    return currentUser?.role === 'admin' && currentUser?.status === 'active'
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  getStats: () => {
    const users = userService.getAll()
    const orders = orderService.getAll()
    const documents = documentService.getAll()
    const categories = categoryService.getAll()
    
    return {
      totalUsers: users.length,
      totalExecutors: users.filter(u => u.role === 'executor').length,
      totalClients: users.filter(u => u.role === 'client').length,
      totalOrders: orders.length,
      pendingVerifications: documents.filter(d => d.status === 'pending').length,
      activeCategories: categories.filter(c => c.isActive).length,
      totalRevenue: orders.reduce((sum, order) => sum + order.price, 0)
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
export default {
  userService,
  orderService,
  categoryService,
  documentService,
  subscriptionService,
  timeSlotService,
  reviewService,
  authService,
  adminService
} 