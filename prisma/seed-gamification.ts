import { PrismaClient } from '@prisma/client'
import { CLIENT_LEVELS, EXECUTOR_LEVELS, CLIENT_ACHIEVEMENTS, EXECUTOR_ACHIEVEMENTS } from '../lib/gamification/constants'

const prisma = new PrismaClient()

async function seedGamification() {
  console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏...')

  // –°–æ–∑–¥–∞–µ–º —É—Ä–æ–≤–Ω–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
  console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤...')
  for (const level of CLIENT_LEVELS) {
    await prisma.level.upsert({
      where: { level: level.level },
      update: level,
      create: level
    })
  }
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${CLIENT_LEVELS.length} —É—Ä–æ–≤–Ω–µ–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤`)

  // –°–æ–∑–¥–∞–µ–º —É—Ä–æ–≤–Ω–∏ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
  console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π...')
  for (const level of EXECUTOR_LEVELS) {
    await prisma.level.upsert({
      where: { level: level.level },
      update: level,
      create: level
    })
  }
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${EXECUTOR_LEVELS.length} —É—Ä–æ–≤–Ω–µ–π –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π`)

  // –°–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
  console.log('üèÜ –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤...')
  for (const achievement of CLIENT_ACHIEVEMENTS) {
    await prisma.achievement.upsert({
      where: { id: parseInt(achievement.id) },
      update: {
        title: achievement.title,
        description: achievement.description,
        icon: achievement.icon,
        xpReward: achievement.xpReward,
        category: achievement.category,
        rarity: achievement.rarity
      },
      create: {
        id: parseInt(achievement.id),
        title: achievement.title,
        description: achievement.description,
        icon: achievement.icon,
        xpReward: achievement.xpReward,
        category: achievement.category,
        rarity: achievement.rarity
      }
    })
  }
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${CLIENT_ACHIEVEMENTS.length} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤`)

  // –°–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
  console.log('üèÜ –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π...')
  for (const achievement of EXECUTOR_ACHIEVEMENTS) {
    await prisma.achievement.upsert({
      where: { id: parseInt(achievement.id) },
      update: {
        title: achievement.title,
        description: achievement.description,
        icon: achievement.icon,
        xpReward: achievement.xpReward,
        category: achievement.category,
        rarity: achievement.rarity
      },
      create: {
        id: parseInt(achievement.id),
        title: achievement.title,
        description: achievement.description,
        icon: achievement.icon,
        xpReward: achievement.xpReward,
        category: achievement.category,
        rarity: achievement.rarity
      }
    })
  }
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${EXECUTOR_ACHIEVEMENTS.length} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π`)

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  console.log('üë• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...')
  const users = await prisma.user.findMany()
  
  for (const user of users) {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!user.referralCode) {
      const referralCode = generateReferralCode()
      await prisma.user.update({
        where: { id: user.id },
        data: { referralCode }
      })
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π XP –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (user.experiencePoints === 0) {
      await prisma.user.update({
        where: { id: user.id },
        data: {
          experiencePoints: 50, // –ù–∞—á–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
          currentLevel: 1,
          totalXpEarned: 50
        }
      })

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
      await prisma.xpHistory.create({
        data: {
          userId: user.id,
          xpAmount: 50,
          source: 'welcome_bonus',
          description: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ProDoAgency!'
        }
      })
    }
  }
  console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`)

  console.log('üéâ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
}

function generateReferralCode(): string {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
  let result = ''
  for (let i = 0; i < 8; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length))
  }
  return result
}

seedGamification()
  .catch((e) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
