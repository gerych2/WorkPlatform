"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/orders/[id]/route";
exports.ids = ["app/api/orders/[id]/route"];
exports.modules = {

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Forders%2F%5Bid%5D%2Froute&page=%2Fapi%2Forders%2F%5Bid%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Forders%2F%5Bid%5D%2Froute.ts&appDir=D%3A%5Cmobile%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Cmobile&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Forders%2F%5Bid%5D%2Froute&page=%2Fapi%2Forders%2F%5Bid%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Forders%2F%5Bid%5D%2Froute.ts&appDir=D%3A%5Cmobile%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Cmobile&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var D_mobile_app_api_orders_id_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/orders/[id]/route.ts */ \"(rsc)/./app/api/orders/[id]/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/orders/[id]/route\",\n        pathname: \"/api/orders/[id]\",\n        filename: \"route\",\n        bundlePath: \"app/api/orders/[id]/route\"\n    },\n    resolvedPagePath: \"D:\\\\mobile\\\\app\\\\api\\\\orders\\\\[id]\\\\route.ts\",\n    nextConfigOutput,\n    userland: D_mobile_app_api_orders_id_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/orders/[id]/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZvcmRlcnMlMkYlNUJpZCU1RCUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGb3JkZXJzJTJGJTVCaWQlNUQlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZvcmRlcnMlMkYlNUJpZCU1RCUyRnJvdXRlLnRzJmFwcERpcj1EJTNBJTVDbW9iaWxlJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1EJTNBJTVDbW9iaWxlJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ0o7QUFDekU7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSx1R0FBdUc7QUFDL0c7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUM2Sjs7QUFFN0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9kby1hZ2VuY3kvP2NjNTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiRDpcXFxcbW9iaWxlXFxcXGFwcFxcXFxhcGlcXFxcb3JkZXJzXFxcXFtpZF1cXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL29yZGVycy9baWRdL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvb3JkZXJzL1tpZF1cIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL29yZGVycy9baWRdL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiRDpcXFxcbW9iaWxlXFxcXGFwcFxcXFxhcGlcXFxcb3JkZXJzXFxcXFtpZF1cXFxccm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgaGVhZGVySG9va3MsIHN0YXRpY0dlbmVyYXRpb25CYWlsb3V0IH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvb3JkZXJzL1tpZF0vcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgaGVhZGVySG9va3MsIHN0YXRpY0dlbmVyYXRpb25CYWlsb3V0LCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Forders%2F%5Bid%5D%2Froute&page=%2Fapi%2Forders%2F%5Bid%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Forders%2F%5Bid%5D%2Froute.ts&appDir=D%3A%5Cmobile%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Cmobile&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/orders/[id]/route.ts":
/*!**************************************!*\
  !*** ./app/api/orders/[id]/route.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DELETE: () => (/* binding */ DELETE),\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   PATCH: () => (/* binding */ PATCH)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_serverUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../lib/serverUtils */ \"(rsc)/./lib/serverUtils.ts\");\n/* harmony import */ var _lib_violationSystem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../lib/violationSystem */ \"(rsc)/./lib/violationSystem.ts\");\n\n\n\n\nconst prisma = new _prisma_client__WEBPACK_IMPORTED_MODULE_1__.PrismaClient();\n// Получение детальной информации о заказе\nasync function GET(request, { params }) {\n    try {\n        const orderId = parseInt(params.id);\n        console.log(\"API: Fetching order with ID:\", orderId);\n        // Получаем текущего пользователя\n        const authHeader = request.headers.get(\"authorization\");\n        const userData = (0,_lib_serverUtils__WEBPACK_IMPORTED_MODULE_2__.getUserDataFromToken)(authHeader);\n        console.log(\"API: User data:\", {\n            id: userData.id,\n            role: userData.role,\n            name: userData.name\n        });\n        if (!userData) {\n            console.log(\"API: No user data\");\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"Unauthorized\"\n            }, {\n                status: 401\n            });\n        }\n        // Получаем заказ\n        const order = await prisma.order.findUnique({\n            where: {\n                id: orderId\n            },\n            include: {\n                category: true,\n                client: {\n                    select: {\n                        id: true,\n                        name: true,\n                        email: true,\n                        phone: true,\n                        clientRating: true,\n                        clientReviewsCount: true\n                    }\n                },\n                executor: {\n                    select: {\n                        id: true,\n                        name: true,\n                        email: true,\n                        phone: true\n                    }\n                }\n            }\n        });\n        if (!order) {\n            console.log(\"API: Order not found with ID:\", orderId);\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"Order not found\"\n            }, {\n                status: 404\n            });\n        }\n        console.log(\"API: Order found:\", {\n            id: order.id,\n            clientId: order.clientId,\n            executorId: order.executorId,\n            status: order.status\n        });\n        // Проверяем права доступа\n        if (userData.role === \"client\" && order.clientId !== userData.id) {\n            console.log(\"API: Access denied for client - order clientId:\", order.clientId, \"user id:\", userData.id);\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"Access denied\"\n            }, {\n                status: 403\n            });\n        }\n        if (userData.role === \"executor\") {\n            // Исполнитель может видеть заказы, которые он принял, или заказы без исполнителя (для принятия)\n            // Также может видеть заказы в своей категории для принятия\n            if (order.executorId && order.executorId !== userData.id) {\n                // Проверяем, работает ли исполнитель в этой категории\n                const executorProfile = await prisma.executorProfile.findUnique({\n                    where: {\n                        userId: userData.id\n                    }\n                });\n                if (!executorProfile || !executorProfile.categories.includes(order.categoryId)) {\n                    console.log(\"API: Access denied for executor - not working in this category\");\n                    return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                        error: \"Access denied\"\n                    }, {\n                        status: 403\n                    });\n                }\n            }\n        }\n        console.log(\"API: Access granted, returning order\");\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json(order);\n    } catch (error) {\n        console.error(\"Error fetching order:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            error: \"Internal server error\"\n        }, {\n            status: 500\n        });\n    }\n}\n// Обновление заказа (принятие исполнителем)\nasync function PATCH(request, { params }) {\n    try {\n        const orderId = parseInt(params.id);\n        const body = await request.json();\n        const { status, executorId } = body;\n        // Получаем текущего пользователя\n        const authHeader = request.headers.get(\"authorization\");\n        if (!authHeader) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"Unauthorized\"\n            }, {\n                status: 401\n            });\n        }\n        const userData = (0,_lib_serverUtils__WEBPACK_IMPORTED_MODULE_2__.getUserDataFromToken)(authHeader);\n        if (!userData) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"Unauthorized\"\n            }, {\n                status: 401\n            });\n        }\n        // Проверяем, что заказ существует\n        const existingOrder = await prisma.order.findUnique({\n            where: {\n                id: orderId\n            },\n            include: {\n                client: true,\n                category: true\n            }\n        });\n        if (!existingOrder) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"Order not found\"\n            }, {\n                status: 404\n            });\n        }\n        // Если исполнитель принимает заказ\n        if (status === \"confirmed\" && executorId) {\n            // Проверяем, что пользователь является исполнителем\n            if (userData.role !== \"executor\") {\n                return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                    error: \"Only executors can accept orders\"\n                }, {\n                    status: 403\n                });\n            }\n            // Проверяем, не заблокирован ли исполнитель\n            const blockStatus = await _lib_violationSystem__WEBPACK_IMPORTED_MODULE_3__.ViolationSystem.isExecutorBlocked(userData.id);\n            if (blockStatus.isBlocked) {\n                return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                    error: \"Исполнитель заблокирован\",\n                    reason: blockStatus.reason,\n                    blockEndDate: blockStatus.blockEndDate\n                }, {\n                    status: 403\n                });\n            }\n            // Проверяем, что у исполнителя есть активная подписка\n            const hasActiveSubscription = await prisma.subscription.findFirst({\n                where: {\n                    userId: userData.id,\n                    status: \"active\",\n                    endDate: {\n                        gte: new Date()\n                    }\n                }\n            });\n            if (!hasActiveSubscription) {\n                return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                    error: \"Active subscription required to accept orders\",\n                    subscriptionRequired: true\n                }, {\n                    status: 403\n                });\n            }\n            // Проверяем, что заказ еще не принят\n            if (existingOrder.status !== \"pending\") {\n                return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                    error: \"Order is already taken\"\n                }, {\n                    status: 400\n                });\n            }\n            // Проверяем, что исполнитель работает в этой категории\n            const executorProfile = await prisma.executorProfile.findUnique({\n                where: {\n                    userId: userData.id\n                }\n            });\n            if (!executorProfile || !executorProfile.categories.includes(existingOrder.categoryId)) {\n                return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                    error: \"You cannot accept orders in this category\"\n                }, {\n                    status: 403\n                });\n            }\n            // Обновляем заказ\n            const updatedOrder = await prisma.order.update({\n                where: {\n                    id: orderId\n                },\n                data: {\n                    status: \"confirmed\",\n                    executorId: userData.id\n                },\n                include: {\n                    client: {\n                        select: {\n                            id: true,\n                            name: true,\n                            email: true\n                        }\n                    },\n                    executor: {\n                        select: {\n                            id: true,\n                            name: true,\n                            email: true\n                        }\n                    },\n                    category: true\n                }\n            });\n            // Создаем уведомление для клиента\n            await prisma.notification.create({\n                data: {\n                    userId: existingOrder.clientId,\n                    title: \"Заказ принят исполнителем\",\n                    message: `Исполнитель ${userData.name} принял ваш заказ \"${existingOrder.serviceDescription}\"`,\n                    type: \"order_accepted\"\n                }\n            });\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                message: \"Order accepted successfully\",\n                order: updatedOrder\n            });\n        }\n        // Если исполнитель завершает заказ\n        if (status === \"completed\" && userData.role === \"executor\" && userData.id === existingOrder.executorId) {\n            const updatedOrder = await prisma.order.update({\n                where: {\n                    id: orderId\n                },\n                data: {\n                    status: \"completed\",\n                    completedAt: new Date()\n                },\n                include: {\n                    client: {\n                        select: {\n                            id: true,\n                            name: true,\n                            email: true\n                        }\n                    },\n                    executor: {\n                        select: {\n                            id: true,\n                            name: true,\n                            email: true\n                        }\n                    },\n                    category: true\n                }\n            });\n            // Создаем уведомление для клиента\n            await prisma.notification.create({\n                data: {\n                    userId: existingOrder.clientId,\n                    title: \"Заказ выполнен\",\n                    message: `Исполнитель ${userData.name} завершил ваш заказ \"${existingOrder.serviceDescription}\"`,\n                    type: \"order_completed\"\n                }\n            });\n            // Обновляем статистику исполнителя\n            await prisma.executorProfile.update({\n                where: {\n                    userId: userData.id\n                },\n                data: {\n                    completedOrders: {\n                        increment: 1\n                    }\n                }\n            });\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                message: \"Order completed successfully\",\n                order: updatedOrder\n            });\n        }\n        // Если клиент обновляет заказ\n        if (userData.role === \"client\" && userData.id === existingOrder.clientId) {\n            const updatedOrder = await prisma.order.update({\n                where: {\n                    id: orderId\n                },\n                data: {\n                    status\n                },\n                include: {\n                    client: {\n                        select: {\n                            id: true,\n                            name: true,\n                            email: true\n                        }\n                    },\n                    executor: {\n                        select: {\n                            id: true,\n                            name: true,\n                            email: true\n                        }\n                    },\n                    category: true\n                }\n            });\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                message: \"Order updated successfully\",\n                order: updatedOrder\n            });\n        }\n        // Если исполнитель отклоняет заказ\n        if (status === \"cancelled\" && userData.role === \"executor\" && userData.id === existingOrder.executorId) {\n            const updatedOrder = await prisma.order.update({\n                where: {\n                    id: orderId\n                },\n                data: {\n                    status: \"cancelled\",\n                    cancelledAt: new Date()\n                },\n                include: {\n                    client: {\n                        select: {\n                            id: true,\n                            name: true,\n                            email: true\n                        }\n                    },\n                    executor: {\n                        select: {\n                            id: true,\n                            name: true,\n                            email: true\n                        }\n                    },\n                    category: true\n                }\n            });\n            // Создаем уведомление для клиента\n            await prisma.notification.create({\n                data: {\n                    userId: existingOrder.clientId,\n                    title: \"Заказ отклонен исполнителем\",\n                    message: `Исполнитель ${userData.name} отклонил ваш заказ \"${existingOrder.serviceDescription}\"`,\n                    type: \"order_rejected\"\n                }\n            });\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                message: \"Order rejected successfully\",\n                order: updatedOrder\n            });\n        }\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            error: \"Forbidden\"\n        }, {\n            status: 403\n        });\n    } catch (error) {\n        console.error(\"Error updating order:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            error: \"Failed to update order\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function DELETE(request, { params }) {\n    try {\n        const orderId = parseInt(params.id);\n        // Проверяем, существует ли заказ\n        const existingOrder = await prisma.order.findUnique({\n            where: {\n                id: orderId\n            }\n        });\n        if (!existingOrder) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"Заказ не найден\"\n            }, {\n                status: 404\n            });\n        }\n        // Удаляем заказ\n        await prisma.order.delete({\n            where: {\n                id: orderId\n            }\n        });\n        // Обновляем счетчик заказов в категории\n        await prisma.category.update({\n            where: {\n                id: existingOrder.categoryId\n            },\n            data: {\n                orderCount: {\n                    decrement: 1\n                }\n            }\n        });\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: true,\n            message: \"Заказ успешно удален\"\n        });\n    } catch (error) {\n        console.error(\"Error deleting order:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            error: \"Ошибка при удалении заказа\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/orders/[id]/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/serverUtils.ts":
/*!****************************!*\
  !*** ./lib/serverUtils.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getUserDataFromToken: () => (/* binding */ getUserDataFromToken),\n/* harmony export */   safeBase64Decode: () => (/* binding */ safeBase64Decode)\n/* harmony export */ });\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer */ \"buffer\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(buffer__WEBPACK_IMPORTED_MODULE_0__);\n\n// Безопасное декодирование из base64 для UTF-8 строк на сервере\nfunction safeBase64Decode(str) {\n    try {\n        // Сначала декодируем из base64, затем из UTF-8\n        return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(str, \"base64\").toString(\"utf-8\");\n    } catch (error) {\n        console.error(\"Error decoding from base64:\", error);\n        // Fallback: используем простой Buffer для ASCII строк\n        return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(str, \"base64\").toString(\"ascii\");\n    }\n}\n// Извлечение данных пользователя из токена авторизации\nfunction getUserDataFromToken(authHeader) {\n    if (!authHeader) {\n        return null;\n    }\n    try {\n        const token = authHeader.replace(\"Bearer \", \"\");\n        const userDataString = safeBase64Decode(token);\n        return JSON.parse(userDataString);\n    } catch (error) {\n        console.error(\"Error parsing user data from token:\", error);\n        return null;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvc2VydmVyVXRpbHMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUErQjtBQUUvQixnRUFBZ0U7QUFDekQsU0FBU0MsaUJBQWlCQyxHQUFXO0lBQzFDLElBQUk7UUFDRiwrQ0FBK0M7UUFDL0MsT0FBT0YsMENBQU1BLENBQUNHLElBQUksQ0FBQ0QsS0FBSyxVQUFVRSxRQUFRLENBQUM7SUFDN0MsRUFBRSxPQUFPQyxPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQywrQkFBK0JBO1FBQzdDLHNEQUFzRDtRQUN0RCxPQUFPTCwwQ0FBTUEsQ0FBQ0csSUFBSSxDQUFDRCxLQUFLLFVBQVVFLFFBQVEsQ0FBQztJQUM3QztBQUNGO0FBRUEsdURBQXVEO0FBQ2hELFNBQVNHLHFCQUFxQkMsVUFBeUI7SUFDNUQsSUFBSSxDQUFDQSxZQUFZO1FBQ2YsT0FBTztJQUNUO0lBRUEsSUFBSTtRQUNGLE1BQU1DLFFBQVFELFdBQVdFLE9BQU8sQ0FBQyxXQUFXO1FBQzVDLE1BQU1DLGlCQUFpQlYsaUJBQWlCUTtRQUN4QyxPQUFPRyxLQUFLQyxLQUFLLENBQUNGO0lBQ3BCLEVBQUUsT0FBT04sT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsdUNBQXVDQTtRQUNyRCxPQUFPO0lBQ1Q7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb2RvLWFnZW5jeS8uL2xpYi9zZXJ2ZXJVdGlscy50cz85YWViIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJ1ZmZlciB9IGZyb20gJ2J1ZmZlcidcclxuXHJcbi8vINCR0LXQt9C+0L/QsNGB0L3QvtC1INC00LXQutC+0LTQuNGA0L7QstCw0L3QuNC1INC40LcgYmFzZTY0INC00LvRjyBVVEYtOCDRgdGC0YDQvtC6INC90LAg0YHQtdGA0LLQtdGA0LVcclxuZXhwb3J0IGZ1bmN0aW9uIHNhZmVCYXNlNjREZWNvZGUoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gIHRyeSB7XHJcbiAgICAvLyDQodC90LDRh9Cw0LvQsCDQtNC10LrQvtC00LjRgNGD0LXQvCDQuNC3IGJhc2U2NCwg0LfQsNGC0LXQvCDQuNC3IFVURi04XHJcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oc3RyLCAnYmFzZTY0JykudG9TdHJpbmcoJ3V0Zi04JylcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZGVjb2RpbmcgZnJvbSBiYXNlNjQ6JywgZXJyb3IpXHJcbiAgICAvLyBGYWxsYmFjazog0LjRgdC/0L7Qu9GM0LfRg9C10Lwg0L/RgNC+0YHRgtC+0LkgQnVmZmVyINC00LvRjyBBU0NJSSDRgdGC0YDQvtC6XHJcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oc3RyLCAnYmFzZTY0JykudG9TdHJpbmcoJ2FzY2lpJylcclxuICB9XHJcbn1cclxuXHJcbi8vINCY0LfQstC70LXRh9C10L3QuNC1INC00LDQvdC90YvRhSDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8g0LjQtyDRgtC+0LrQtdC90LAg0LDQstGC0L7RgNC40LfQsNGG0LjQuFxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VXNlckRhdGFGcm9tVG9rZW4oYXV0aEhlYWRlcjogc3RyaW5nIHwgbnVsbCkge1xyXG4gIGlmICghYXV0aEhlYWRlcikge1xyXG4gICAgcmV0dXJuIG51bGxcclxuICB9XHJcblxyXG4gIHRyeSB7XHJcbiAgICBjb25zdCB0b2tlbiA9IGF1dGhIZWFkZXIucmVwbGFjZSgnQmVhcmVyICcsICcnKVxyXG4gICAgY29uc3QgdXNlckRhdGFTdHJpbmcgPSBzYWZlQmFzZTY0RGVjb2RlKHRva2VuKVxyXG4gICAgcmV0dXJuIEpTT04ucGFyc2UodXNlckRhdGFTdHJpbmcpXHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHBhcnNpbmcgdXNlciBkYXRhIGZyb20gdG9rZW46JywgZXJyb3IpXHJcbiAgICByZXR1cm4gbnVsbFxyXG4gIH1cclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuIl0sIm5hbWVzIjpbIkJ1ZmZlciIsInNhZmVCYXNlNjREZWNvZGUiLCJzdHIiLCJmcm9tIiwidG9TdHJpbmciLCJlcnJvciIsImNvbnNvbGUiLCJnZXRVc2VyRGF0YUZyb21Ub2tlbiIsImF1dGhIZWFkZXIiLCJ0b2tlbiIsInJlcGxhY2UiLCJ1c2VyRGF0YVN0cmluZyIsIkpTT04iLCJwYXJzZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/serverUtils.ts\n");

/***/ }),

/***/ "(rsc)/./lib/violationSystem.ts":
/*!********************************!*\
  !*** ./lib/violationSystem.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ViolationSystem: () => (/* binding */ ViolationSystem)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nconst prisma = new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\nclass ViolationSystem {\n    // Создание нарушения за невыполненный заказ\n    static async recordUncompletedOrder(executorId, orderId, reason) {\n        try {\n            // Получаем информацию об исполнителе\n            const executor = await prisma.user.findUnique({\n                where: {\n                    id: executorId\n                },\n                include: {\n                    violations: {\n                        where: {\n                            type: \"uncompleted_order\",\n                            createdAt: {\n                                gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) // За последние 30 дней\n                            }\n                        },\n                        orderBy: {\n                            createdAt: \"desc\"\n                        }\n                    }\n                }\n            });\n            if (!executor) {\n                return {\n                    success: false,\n                    message: \"Исполнитель не найден\"\n                };\n            }\n            // Создаем запись о нарушении\n            const violation = await prisma.violation.create({\n                data: {\n                    executorId,\n                    orderId,\n                    type: \"uncompleted_order\",\n                    reason: reason || \"Заказ не был выполнен в срок\",\n                    severity: 1\n                }\n            });\n            // Обновляем счетчик нарушений\n            const newViolationsCount = executor.violationsCount + 1;\n            const now = new Date();\n            let blockDuration = 0;\n            let blockEndDate;\n            let blockReason = \"\";\n            // Определяем уровень наказания\n            if (newViolationsCount === 1) {\n                // Первое нарушение - только предупреждение\n                blockReason = \"Предупреждение за невыполненный заказ\";\n            } else if (newViolationsCount === 2) {\n                // Второе нарушение - блокировка на 3 дня\n                blockDuration = 3;\n                blockEndDate = new Date(now.getTime() + 3 * 24 * 60 * 60 * 1000);\n                blockReason = \"Блокировка на 3 дня за повторное невыполнение заказа\";\n            } else if (newViolationsCount === 3) {\n                // Третье нарушение - блокировка на 7 дней\n                blockDuration = 7;\n                blockEndDate = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000);\n                blockReason = \"Блокировка на 7 дней за систематическое невыполнение заказов\";\n            } else if (newViolationsCount >= 4) {\n                // Четвертое и последующие нарушения - блокировка на 30 дней\n                blockDuration = 30;\n                blockEndDate = new Date(now.getTime() + 30 * 24 * 60 * 60 * 1000);\n                blockReason = \"Блокировка на 30 дней за систематическое невыполнение заказов\";\n            }\n            // Обновляем информацию об исполнителе\n            await prisma.user.update({\n                where: {\n                    id: executorId\n                },\n                data: {\n                    violationsCount: newViolationsCount,\n                    lastViolationDate: now,\n                    isBlocked: blockDuration > 0,\n                    blockStartDate: blockDuration > 0 ? now : null,\n                    blockEndDate: blockEndDate || null,\n                    blockReason: blockReason || null\n                }\n            });\n            // Создаем уведомление для исполнителя\n            await prisma.notification.create({\n                data: {\n                    userId: executorId,\n                    type: \"violation\",\n                    title: blockDuration > 0 ? \"Аккаунт заблокирован\" : \"Предупреждение\",\n                    message: blockReason,\n                    isRead: false\n                }\n            });\n            // Если исполнитель заблокирован, возвращаем заказ в открытый поиск\n            if (blockDuration > 0) {\n                await prisma.order.update({\n                    where: {\n                        id: orderId\n                    },\n                    data: {\n                        status: \"pending\",\n                        executorId: null\n                    }\n                });\n            }\n            return {\n                success: true,\n                message: blockReason,\n                blockDuration,\n                blockEndDate\n            };\n        } catch (error) {\n            console.error(\"Error recording violation:\", error);\n            return {\n                success: false,\n                message: \"Ошибка при записи нарушения\"\n            };\n        }\n    }\n    // Проверка возможности отмены заказа (в течение 12 часов)\n    static async canCancelOrder(executorId, orderId) {\n        try {\n            const order = await prisma.order.findUnique({\n                where: {\n                    id: orderId\n                },\n                include: {\n                    executor: true\n                }\n            });\n            if (!order || order.executorId !== executorId) {\n                return false;\n            }\n            // Проверяем, прошло ли 12 часов с момента принятия заказа\n            const twelveHoursAgo = new Date(Date.now() - 12 * 60 * 60 * 1000);\n            return order.updatedAt > twelveHoursAgo;\n        } catch (error) {\n            console.error(\"Error checking cancellation eligibility:\", error);\n            return false;\n        }\n    }\n    // Отмена заказа исполнителем (в течение 12 часов)\n    static async cancelOrderByExecutor(executorId, orderId, reason) {\n        try {\n            const canCancel = await this.canCancelOrder(executorId, orderId);\n            if (!canCancel) {\n                return {\n                    success: false,\n                    message: \"Отмена заказа возможна только в течение 12 часов после принятия\"\n                };\n            }\n            // Возвращаем заказ в открытый поиск\n            await prisma.order.update({\n                where: {\n                    id: orderId\n                },\n                data: {\n                    status: \"pending\",\n                    executorId: null\n                }\n            });\n            // Создаем уведомление для клиента\n            const order = await prisma.order.findUnique({\n                where: {\n                    id: orderId\n                },\n                include: {\n                    client: true\n                }\n            });\n            if (order) {\n                await prisma.notification.create({\n                    data: {\n                        userId: order.clientId,\n                        type: \"order_cancelled\",\n                        title: \"Заказ отменен исполнителем\",\n                        message: `Исполнитель отменил заказ. ${reason || \"Причина не указана\"}`,\n                        isRead: false\n                    }\n                });\n            }\n            return {\n                success: true,\n                message: \"Заказ успешно отменен и возвращен в открытый поиск\"\n            };\n        } catch (error) {\n            console.error(\"Error cancelling order:\", error);\n            return {\n                success: false,\n                message: \"Ошибка при отмене заказа\"\n            };\n        }\n    }\n    // Проверка блокировки исполнителя\n    static async isExecutorBlocked(executorId) {\n        try {\n            const executor = await prisma.user.findUnique({\n                where: {\n                    id: executorId\n                }\n            });\n            if (!executor) {\n                return {\n                    isBlocked: false\n                };\n            }\n            // Проверяем, истекла ли блокировка\n            if (executor.isBlocked && executor.blockEndDate && executor.blockEndDate <= new Date()) {\n                // Разблокируем исполнителя\n                await prisma.user.update({\n                    where: {\n                        id: executorId\n                    },\n                    data: {\n                        isBlocked: false,\n                        blockStartDate: null,\n                        blockEndDate: null,\n                        blockReason: null\n                    }\n                });\n                return {\n                    isBlocked: false\n                };\n            }\n            return {\n                isBlocked: executor.isBlocked,\n                reason: executor.blockReason || undefined,\n                blockEndDate: executor.blockEndDate || undefined\n            };\n        } catch (error) {\n            console.error(\"Error checking executor block status:\", error);\n            return {\n                isBlocked: false\n            };\n        }\n    }\n    // Получение истории нарушений исполнителя\n    static async getExecutorViolations(executorId) {\n        try {\n            return await prisma.violation.findMany({\n                where: {\n                    executorId\n                },\n                include: {\n                    order: {\n                        select: {\n                            id: true,\n                            serviceDescription: true,\n                            orderDate: true\n                        }\n                    }\n                },\n                orderBy: {\n                    createdAt: \"desc\"\n                }\n            });\n        } catch (error) {\n            console.error(\"Error fetching executor violations:\", error);\n            return [];\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/violationSystem.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Forders%2F%5Bid%5D%2Froute&page=%2Fapi%2Forders%2F%5Bid%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Forders%2F%5Bid%5D%2Froute.ts&appDir=D%3A%5Cmobile%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Cmobile&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();